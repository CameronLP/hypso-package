:py:mod:`hypso.georeference.georef`
===================================

.. py:module:: hypso.georeference.georef


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   geometric/index.rst
   gmaps/index.rst
   time/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   hypso.georeference.georef.GoogleMapsLayers
   hypso.georeference.georef.GoogleMapDownloader



Functions
~~~~~~~~~

.. autoapisummary::

   hypso.georeference.georef.gen_resample_grid
   hypso.georeference.georef.gen_resample_grid_bbox_min
   hypso.georeference.georef.get_julian_day_number
   hypso.georeference.georef.get_greenwich_mean_sidereal_time_seconds
   hypso.georeference.georef.minimum_bounding_rectangle
   hypso.georeference.georef.mat_from_quat
   hypso.georeference.georef.rotate_axis_angle
   hypso.georeference.georef.ecef_to_lat_lon_alt
   hypso.georeference.georef.eci_to_lat_loneci_alt
   hypso.georeference.georef.eci_lon_to_ecef_lon
   hypso.georeference.georef.eci_to_lat_lon_alt
   hypso.georeference.georef.pos_ecef_to_lat_lon_alt
   hypso.georeference.georef.lat_lon_alt_to_ecef
   hypso.georeference.georef.ellipsoid_line_intersection
   hypso.georeference.georef.get_julian_day_number
   hypso.georeference.georef.get_greenwich_mean_sidereal_time_seconds
   hypso.georeference.georef.pixel_to_latlon
   hypso.georeference.georef.main



Attributes
~~~~~~~~~~

.. autoapisummary::

   hypso.georeference.georef.R_eq
   hypso.georeference.georef.f
   hypso.georeference.georef.e_2
   hypso.georeference.georef.R_pl


.. py:function:: gen_resample_grid(grid_res_x, grid_res_y, bbox_coord_limits)

   bbox_coord_limits is expected to be a list or tuple with 4 elements as follows:
       [xmin, xmax, ymin, ymax]


.. py:function:: gen_resample_grid_bbox_min(grid_res_x, grid_res_y, bbox_minimal)

   @bbox_minimal shall have has shape [4,2] and consists of four points
   describing the corner of the minimal bounding box.
   The width of the box is taken as the distance between point [0,:] and [3,:].
   The height of the box is taken as the distance between point [2,:] and [3,:].
   The x direction is taken as the direction going from point [3,:] to point [0,:].
   The y direction is taken as the direction going from point [3,:] to point [2,:].


.. py:function:: get_julian_day_number(date_time)


.. py:function:: get_greenwich_mean_sidereal_time_seconds(date_time)

   returns seconds since last midnight of a sidereal day


.. py:function:: minimum_bounding_rectangle(points)

   Find the smallest bounding rectangle for a set of points.
   Returns a set of points representing the corners of the bounding box.

   :param points: an nx2 matrix of coordinates
   :rval: a 4x2 matrix of bounding box corner coordinates


.. py:function:: mat_from_quat(quat)

   quat must be a four element list of numbers or 4 element nump array
   returns a 3x3 numpy array containing the rotation matrix


.. py:function:: rotate_axis_angle(vec, axis, angle)

   Rotates vector vec around axis axis by angle angle
   Both vec, axis, and vec_rot are column vectors. axis is a 
   unit vector, angle is in radians


.. py:data:: R_eq
   :value: 6378137.0

   

.. py:data:: f

   

.. py:data:: e_2

   

.. py:data:: R_pl
   :value: 6356752.0

   

.. py:function:: ecef_to_lat_lon_alt(pos)

   input pos has to be Nx3, and units in meters
   returns lat lon (with respect to ECI axes) and altitude in degrees and meters


.. py:function:: eci_to_lat_loneci_alt(pos)


.. py:function:: eci_lon_to_ecef_lon(datetime_utc, lon, time_offset)


.. py:function:: eci_to_lat_lon_alt(pos, times, time_offset)

   pos needs to be Nx3
   times needs to be N
   time_offset is a float
       time_offset is an additional time offset to adjust georeferencing


.. py:function:: pos_ecef_to_lat_lon_alt(pos)


.. py:function:: lat_lon_alt_to_ecef(lla)


.. py:function:: ellipsoid_line_intersection(point, direction)


.. py:function:: get_julian_day_number(date_time)


.. py:function:: get_greenwich_mean_sidereal_time_seconds(date_time)

   returns seconds since last midnight of a sidereal day


.. py:function:: pixel_to_latlon(px_x, px_y, tl_x, tl_y, zoom_level)

   px_x, px_y: Pixel coordinates of google maps image (can be float)
   tl_x, tl_y: tile indices of top left (noth-western) corner (must be int)
   zoom_level: zoom level of the image (also must be int)

   returns: lat,lon


.. py:class:: GoogleMapsLayers


   .. py:attribute:: ROADMAP
      :value: 'v'

      

   .. py:attribute:: TERRAIN
      :value: 'p'

      

   .. py:attribute:: ALTERED_ROADMAP
      :value: 'r'

      

   .. py:attribute:: SATELLITE
      :value: 's'

      

   .. py:attribute:: TERRAIN_ONLY
      :value: 't'

      

   .. py:attribute:: HYBRID
      :value: 'y'

      


.. py:class:: GoogleMapDownloader(lat, lng, zoom=12, layer=GoogleMapsLayers.SATELLITE)


   A class which generates high resolution google maps images given
   a longitude, latitude and zoom level

   .. py:method:: latlon_to_tileXY()

      Generates an X,Y tile coordinate based on the latitude, longitude
      and zoom level
      Returns:    An X,Y tile coordinate


   .. py:method:: generateImage(**kwargs)

      Generates an image by stitching a number of google map tiles together.
      Args:
          center_tile_x:  The center tile x coordinate
          center_tile_y:  The center tile y coordinate
          tile_count_x:   The number of tiles wide the image should be
          tile_count_y:   The number of tiles high the image should be
      Returns:
          A high-resolution Goole Map image, and the tile coordinates of
          the top left tile in the image.



.. py:function:: main()


