:py:mod:`hypso.classification.WaterDetect.waterdetect.Common`
=============================================================

.. py:module:: hypso.classification.WaterDetect.waterdetect.Common


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   hypso.classification.WaterDetect.waterdetect.Common.DWBaseConfig
   hypso.classification.WaterDetect.waterdetect.Common.DWConfig
   hypso.classification.WaterDetect.waterdetect.Common.DWutils



Functions
~~~~~~~~~

.. autoapisummary::

   hypso.classification.WaterDetect.waterdetect.Common.test_ini



.. py:function:: test_ini()


.. py:class:: DWBaseConfig(config_file=None)


   .. py:attribute:: _defaults

      

   .. py:attribute:: _units

      

   .. py:method:: load_config_file(config_file)


   .. py:method:: return_defaults(section, key)


   .. py:method:: get_option(section, key, evaluate)



.. py:class:: DWConfig(config_file=None)


   Bases: :py:obj:`DWBaseConfig`

   .. py:property:: reference_band


   .. py:property:: create_composite


   .. py:property:: pdf_reports


   .. py:property:: calc_glint


   .. py:property:: glint_mode


   .. py:property:: min_glint_multiplier


   .. py:property:: pdf_resolution


   .. py:property:: pekel_water


   .. py:property:: pekel_accuracy


   .. py:property:: save_indices


   .. py:property:: texture_stretching


   .. py:property:: external_mask


   .. py:property:: mask_name


   .. py:property:: mask_valid_value


   .. py:property:: mask_invalid_value


   .. py:property:: maximum_invalid


   .. py:property:: average_results


   .. py:property:: min_positive_pixels


   .. py:property:: clustering_method


   .. py:property:: linkage


   .. py:property:: train_size


   .. py:property:: regularization


   .. py:property:: min_train_size


   .. py:property:: max_train_size


   .. py:property:: score_index


   .. py:property:: classifier


   .. py:property:: detect_water_cluster


   .. py:property:: min_clusters


   .. py:property:: max_clusters


   .. py:property:: plot_graphs


   .. py:property:: graphs_bands


   .. py:property:: plot_ts


   .. py:property:: clustering_bands


   .. py:property:: clip_band


   .. py:property:: clip_inf_value


   .. py:property:: clip_sup_value


   .. py:attribute:: _config_file
      :value: 'WaterDetect.ini'

      

   .. py:attribute:: _defaults

      

   .. py:method:: get_masks_list(product)



.. py:class:: DWutils


   .. py:attribute:: indices

      

   .. py:method:: parse_sat_name(folder, img_type='S2_THEIA')
      :staticmethod:


   .. py:method:: parse_planetary_name(name)
      :staticmethod:

      Get the string with a MS PLANETARY name and extract the useful information from it.
      @param name: Image name
      @return: Dictionary with the values.


   .. py:method:: parse_maja_name(name)
      :staticmethod:

      Get the string with a MAJA img name (THEIA format) and extract the useful information from it.
      @param name: Image name
      @return: Dictionary with the values.


   .. py:method:: parse_s2cor_name(name)
      :staticmethod:

      Get the string with a S2COR name (.SAFE format) and extract the useful information from it.
      @param name: Image name
      @return: Dictionary with the values.


   .. py:method:: bitwise_or(array, bit_values)
      :staticmethod:


   .. py:method:: bitwise_and(array, bit_values)
      :staticmethod:


   .. py:method:: flatten(x)
      :staticmethod:


   .. py:method:: listify(lst, uniques=[])
      :staticmethod:


   .. py:method:: check_path(path_str, is_dir=False)
      :staticmethod:

      Check if the path/file exists and returns a Path variable with it
      :param path_str: path string to test
      :param is_dir: whether if it is a directory or a file
      :return: Path type variable


   .. py:method:: get_directories(input_folder)
      :staticmethod:

      Return a list of directories in input_folder. These folders are the repository for satellite products
      :param input_folder: folder that stores the images
      :return: list of images (i.e. directories)


   .. py:method:: calc_normalized_difference(img1, img2, mask=None, compress_cte=0.02)
      :staticmethod:

      Calc the normalized difference of given arrays (img1 - img2)/(img1 + img2).
      Updates the mask if any invalid numbers (ex. np.inf or np.nan) are encountered
      :param img1: first array
      :param img2: second array
      :param mask: initial mask, that will be updated
      :param compress_cte: amount of index compression. The greater, the more the index will be compressed towards 0
      :return: nd array filled with -9999 in the mask and the mask itself


   .. py:method:: calc_mbwi(bands, factor, mask)
      :staticmethod:


   .. py:method:: rgb_burn_in(red, green, blue, burn_in_array, color=None, min_value=None, max_value=None, colormap='viridis', fade=1, uniform_distribution=False, no_data_value=-9999, valid_value=1, transp=0.0)
      :staticmethod:

      Burn in a mask or a specific parameter into an RGB image for visualization purposes.
      The burn_in_array will be copied where values are different from no_data_value.
      :param uniform_distribution: convert the input values in a uniform histogram
      :param colormap: matplotlib colormap (string) to create the RGB ramp
      :param max_value: maximum value
      :param min_value: minimum value
      :param red: Original red band
      :param green: Original green band
      :param blue: Original blue band
      :param burn_in_array: Values to be burnt in
      :param no_data_value: Value to ne unconsidered
      :param color: Tuple of color (R, G, B) to be used in the burn in
      :param fade: Fade the RGB bands to emphasize the copied values
      :param transp: Transparency to use in the mask (0=opaque 1=completely transparent)
      :return: RGB image bands


   .. py:method:: apply_mask(array, mask, no_data_value=-9999, clear_nan=True)
      :staticmethod:


   .. py:method:: gray2color_ramp(grey_array, color1=(0.0, 0.0, 0.6), color2=(0.0, 0.8, 0.0), color3=(1.0, 0.0, 0.0), min_value=0, max_value=20, colormap='viridis', limits=(0, 1))
      :staticmethod:

      Convert a greyscale n-dimensional matrix into a rgb matrix, adding 3 dimensions to it for R, G, and B
      The colors will be mixed
      :param max_value: Maximum value for the color ramp, if None, we consider max(grey)
      :param min_value: Minimum value for the color ramp, if None, we consider min(grey)
      :param grey_array: greyscale vector/matrix
      :param color1: Color for the minimum value
      :param color2: Color for the mid value
      :param color3: Color for the maximum value
      :param limits: Final boundary limits for the RGB values
      :return: Colored vector/matrix


   .. py:method:: array2raster(filename, array, geo_transform, projection, nodatavalue=0, dtype=None)
      :staticmethod:


   .. py:method:: array2rgb_raster(filename, red, green, blue, geo_transform, projection, nodatavalue=-9999)
      :staticmethod:


   .. py:method:: tif_2_pdf(tif_file, resolution=600, scale=2000)
      :staticmethod:

      Convert a TIF image into a PDF given a resolution


   .. py:method:: array2multiband(filename, array, geo_transform, projection, nodatavalue=0, dtype=None)
      :staticmethod:


   .. py:method:: get_train_test_data(data, train_size, min_train_size, max_train_size)
      :staticmethod:

      Split the provided data in train-test bunches
      :param min_train_size: minimum data quantity for train set
      :param max_train_size: maximum data quantity for train set
      :param train_size: percentage of the data to be used as train dataset
      :param data: data to be split
      :return: train and test datasets


   .. py:method:: plot_clustered_data(data, cluster_names, file_name, graph_options, pdf_merger)
      :staticmethod:


   .. py:method:: plot_graphs(bands, graphs_bands, labels_array, file_name, graph_title, invalid_mask=False, max_points=1000, pdf_merger=None)
      :staticmethod:


   .. py:method:: create_composite(bands, folder_name, pdf=True, resolution=600, offset=0)
      :staticmethod:


   .. py:method:: create_bands_dict(bands_array, bands_order)
      :staticmethod:


   .. py:method:: create_colorbar_pdf(product_name, title, label, colormap, min_value, max_value, log_scale=False)
      :staticmethod:


   .. py:method:: find_file_glob(file_string, folder)
      :staticmethod:


   .. py:method:: read_gdal_ds(file, shape_file, temp_dir)
      :staticmethod:

      Read a GDAL dataset clipping it with a given shapefile, if necessary
      :param file: Filepath of the GDAL file (.tif, etc.) as Pathlib
      :param shape_file: file path of the shapefile
      :param temp_dir: file path of the temporary directory
      :return: GDAL dataset


   .. py:method:: extract_angles_from_xml(xml)
      :staticmethod:

      Function to extract Zenith and Azimuth angles values from an xml Sentinel 2 file

      Parameters
      ----------
      xml : TYPE xml file
          DESCRIPTION Filepath of the metadata file from L2A Sentinel 2 data: example "SENTINEL2A_20200328-104846-345_L2A_T31TFJ_C_V2-2_MTD_ALL.xml"

      :return g: list of glint values

      Info
      -------
      SZA : TYPE float
          DESCRIPTION. Sun zenith angle
      SazA : TYPE float
          DESCRIPTION. Sun azimuth angle
      zenith_angle : TYPE list of strings
          DESCRIPTION. Mean_Viewing_Incidence_Angle_List for all the bands
      azimuth_angle : TYPE list of strings
          DESCRIPTION. Mean_Viewing_Incidence_Angle_List for all the bands



   .. py:method:: write_pdf(filename, text, size=(300, 50), position=(5, 5), font_color=(0, 0, 0))
      :staticmethod:


   .. py:method:: create_glint_pdf(xml, name_img, output_folder, g, pdf_merger)
      :staticmethod:

      Function to create an image to add in the pdf report that indicates if there is glint on an image

      Parameters
      ----------
      xml : TYPE xml file
          DESCRIPTION Filepath of the metadata file from L2A Sentinel 2 data: example "SENTINEL2A_20200328-104846-345_L2A_T31TFJ_C_V2-2_MTD_ALL.xml"
      current_imagename : getting current image name
      output_folder: filepath of the output folder
      g: TYPE list
          DESCRIPTION list with glint values for each band of the Sentinel 2 product
      pdf_merger: function to add an element to a pdf



   .. py:method:: remove_negatives(bands, mask=None, negative_values='mask')
      :staticmethod:

      Remove negatives values of given arrays b1 and b2, except masked values.

      :param bands: list of bands to be adjusted
      :param mask: initial mask
      :param negative_values: mask - mask the negative values; # fixed - replace all negative values for 0.001;
              shift - shift each band by its minimum value, so every band has only positive values;
              shift_all - shift each band by the minimum value of all bands. All bands will be shifted up by the
              same amount
      :return: nd arrays without negatives values



