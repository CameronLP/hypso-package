:py:mod:`hypso.plot.map`
========================

.. py:module:: hypso.plot.map


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   hypso.plot.map.axis_extent
   hypso.plot.map.image_extent
   hypso.plot.map.tick_log_formatter
   hypso.plot.map.get_cartopy_axis
   hypso.plot.map.point_rgb_map
   hypso.plot.map.show_rgb_map
   hypso.plot.map.plot_array_overlay
   hypso.plot.map.auto_adjust_img
   hypso.plot.map.get_rgb
   hypso.plot.map.check_projection_geotiff
   hypso.plot.map.write_rgb_to_png



Attributes
~~~~~~~~~~

.. autoapisummary::

   hypso.plot.map.PLOTZOOM


.. py:data:: PLOTZOOM
   :value: 1.0

   

.. py:function:: axis_extent(lat, lon)


.. py:function:: image_extent(inproj_value, lat, lon)


.. py:function:: tick_log_formatter(y, pos)


.. py:function:: get_cartopy_axis(satellite_obj, dpi_input)


.. py:function:: point_rgb_map(satellite_obj, plotTitle='RGB Image', dpi_input=450, patch_dict=None, r_plot=0.007, path_to_save=None)


.. py:function:: show_rgb_map(satellite_obj, plotTitle='RGB Image', dpi_input=450)


.. py:function:: plot_array_overlay(satellite_obj, plot_array, plotTitle='2D Array', cbar_title=' Chlorophyll Concentration [mg m^-3]', dpi_input=450, min_value=0.01, max_value=100)


.. py:function:: auto_adjust_img(img)

   Adjust image contrast using histogram equalization.

   Args:
       img: Image to adjust.

   Returns:
       Adjusted image.


.. py:function:: get_rgb(sat_obj)

   Write the RGB image.

   Args:
       path_to_save (str): The path to save the RGB image.
       R_wl (float, optional): The wavelength for the red channel. Defaults to 650.
       G_wl (float, optional): The wavelength for the green channel. Defaults to 550.
       B_wl (float, optional): The wavelength for the blue channel. Defaults to 450.
       :param sat_obj:


.. py:function:: check_projection_geotiff(satobj)


.. py:function:: write_rgb_to_png(sat_obj, path_to_save)


