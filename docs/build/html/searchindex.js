Search.setIndex({"docnames": ["_templates/autoapi/base/base", "_templates/autoapi/index", "_templates/autoapi/python/attribute", "_templates/autoapi/python/class", "_templates/autoapi/python/data", "_templates/autoapi/python/exception", "_templates/autoapi/python/function", "_templates/autoapi/python/method", "_templates/autoapi/python/module", "_templates/autoapi/python/package", "_templates/autoapi/python/property", "autoapi/hypso/atmospheric/atmospheric_correction_6sv1/index", "autoapi/hypso/atmospheric/atmospheric_correction_acolite/index", "autoapi/hypso/atmospheric/base/index", "autoapi/hypso/atmospheric/index", "autoapi/hypso/calibration/correction/index", "autoapi/hypso/calibration/index", "autoapi/hypso/classification/WaterDetect/index", "autoapi/hypso/classification/WaterDetect/runWaterDetect/index", "autoapi/hypso/classification/WaterDetect/waterdetect/Common/index", "autoapi/hypso/classification/WaterDetect/waterdetect/External_mask/index", "autoapi/hypso/classification/WaterDetect/waterdetect/Glint/index", "autoapi/hypso/classification/WaterDetect/waterdetect/Image/index", "autoapi/hypso/classification/WaterDetect/waterdetect/InputOutput/index", "autoapi/hypso/classification/WaterDetect/waterdetect/WaterDetect/index", "autoapi/hypso/classification/WaterDetect/waterdetect/index", "autoapi/hypso/classification/index", "autoapi/hypso/classification/water/index", "autoapi/hypso/device/index", "autoapi/hypso/download/index", "autoapi/hypso/georeference/coordinate_correction/index", "autoapi/hypso/georeference/create_adcs_timestamps_files/index", "autoapi/hypso/georeference/georef/geometric/index", "autoapi/hypso/georeference/georef/gmaps/index", "autoapi/hypso/georeference/georef/index", "autoapi/hypso/georeference/georef/time/index", "autoapi/hypso/georeference/georef/utils/index", "autoapi/hypso/georeference/georef_plots/index", "autoapi/hypso/georeference/index", "autoapi/hypso/georeference/interpolate_at_frame/index", "autoapi/hypso/georeference/reference/index", "autoapi/hypso/index", "autoapi/hypso/plot/index", "autoapi/hypso/plot/map/index", "autoapi/hypso/reading/index", "autoapi/hypso/reading/load/index", "autoapi/hypso/utils/index", "autoapi/hypso/utils/utils/index", "autoapi/index", "index"], "filenames": ["_templates/autoapi/base/base.rst", "_templates/autoapi/index.rst", "_templates/autoapi/python/attribute.rst", "_templates/autoapi/python/class.rst", "_templates/autoapi/python/data.rst", "_templates/autoapi/python/exception.rst", "_templates/autoapi/python/function.rst", "_templates/autoapi/python/method.rst", "_templates/autoapi/python/module.rst", "_templates/autoapi/python/package.rst", "_templates/autoapi/python/property.rst", "autoapi/hypso/atmospheric/atmospheric_correction_6sv1/index.rst", "autoapi/hypso/atmospheric/atmospheric_correction_acolite/index.rst", "autoapi/hypso/atmospheric/base/index.rst", "autoapi/hypso/atmospheric/index.rst", "autoapi/hypso/calibration/correction/index.rst", "autoapi/hypso/calibration/index.rst", "autoapi/hypso/classification/WaterDetect/index.rst", "autoapi/hypso/classification/WaterDetect/runWaterDetect/index.rst", "autoapi/hypso/classification/WaterDetect/waterdetect/Common/index.rst", "autoapi/hypso/classification/WaterDetect/waterdetect/External_mask/index.rst", "autoapi/hypso/classification/WaterDetect/waterdetect/Glint/index.rst", "autoapi/hypso/classification/WaterDetect/waterdetect/Image/index.rst", "autoapi/hypso/classification/WaterDetect/waterdetect/InputOutput/index.rst", "autoapi/hypso/classification/WaterDetect/waterdetect/WaterDetect/index.rst", "autoapi/hypso/classification/WaterDetect/waterdetect/index.rst", "autoapi/hypso/classification/index.rst", "autoapi/hypso/classification/water/index.rst", "autoapi/hypso/device/index.rst", "autoapi/hypso/download/index.rst", "autoapi/hypso/georeference/coordinate_correction/index.rst", "autoapi/hypso/georeference/create_adcs_timestamps_files/index.rst", "autoapi/hypso/georeference/georef/geometric/index.rst", "autoapi/hypso/georeference/georef/gmaps/index.rst", "autoapi/hypso/georeference/georef/index.rst", "autoapi/hypso/georeference/georef/time/index.rst", "autoapi/hypso/georeference/georef/utils/index.rst", "autoapi/hypso/georeference/georef_plots/index.rst", "autoapi/hypso/georeference/index.rst", "autoapi/hypso/georeference/interpolate_at_frame/index.rst", "autoapi/hypso/georeference/reference/index.rst", "autoapi/hypso/index.rst", "autoapi/hypso/plot/index.rst", "autoapi/hypso/plot/map/index.rst", "autoapi/hypso/reading/index.rst", "autoapi/hypso/reading/load/index.rst", "autoapi/hypso/utils/index.rst", "autoapi/hypso/utils/utils/index.rst", "autoapi/index.rst", "index.rst"], "titles": ["&lt;no title&gt;", "Documentation Reference", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.atmospheric.atmospheric_correction_6sv1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.atmospheric.atmospheric_correction_acolite</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.atmospheric.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.atmospheric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.calibration.correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect.runWaterDetect</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect.waterdetect.Common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect.waterdetect.External_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect.waterdetect.Glint</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect.waterdetect.Image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect.waterdetect.InputOutput</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect.waterdetect.WaterDetect</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.WaterDetect.waterdetect</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.classification.water</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.device</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.download</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.coordinate_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.create_adcs_timestamps_files</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.georef.geometric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.georef.gmaps</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.georef</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.georef.time</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.georef.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.georef_plots</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.interpolate_at_frame</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.georeference.reference</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.plot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.plot.map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.reading</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.reading.load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hypso.utils.utils</span></code>", "Documentation Reference", "Welcome to Hypso Package\u2019s documentation!"], "terms": {"thi": [1, 20, 23, 24, 25, 48], "page": [1, 48, 49], "contain": [1, 20, 23, 24, 25, 28, 32, 34, 41, 48], "auto": [1, 48], "gener": [1, 24, 25, 33, 34, 48], "api": [1, 48], "1": [1, 3, 4, 8, 15, 16, 19, 22, 23, 24, 25, 28, 38, 39, 41, 43, 48], "creat": [1, 18, 19, 21, 24, 25, 48], "sphinx": [1, 48], "autoapi": [1, 3, 8, 48], "extend": [2, 5, 9], "python": [2, 5, 9, 41], "data": [2, 8, 15, 16, 19, 22, 25, 28, 29, 41, 45], "rst": [2, 5, 8, 9], "obj": [3, 4, 6, 7, 8, 10], "displai": [3, 4, 6, 7, 8, 10], "py": [3, 4, 6, 7, 10], "type": [3, 4, 8, 10, 15, 16, 19, 20, 22, 25, 28, 41, 42, 43, 45, 46, 47], "short_nam": [3, 6, 7, 8, 10], "arg": [3, 6, 7, 15, 16, 18, 24, 25, 33, 34, 42, 43, 45], "endif": [3, 4, 6, 7, 8, 10], "return_annot": [3, 6, 7], "overload": [3, 6, 7], "length": [3, 8], "endfor": [3, 6, 7, 8, 10], "base": [3, 14, 19, 23, 24, 25, 33, 34, 41, 48], "show": [3, 4, 8], "inherit": 3, "autoapi_opt": [3, 8], "link_obj": 3, "loop": [3, 21, 24, 25], "last": [3, 34, 35], "diagram": 3, "object": [3, 22, 23, 25], "full_nam": 3, "part": 3, "privat": 3, "member": 3, "docstr": [3, 4, 6, 7, 8, 10], "indent": [3, 4, 6, 7, 8, 10], "3": [3, 4, 6, 7, 8, 10, 19, 22, 24, 25, 34, 36, 42, 43], "set": [3, 8, 15, 16, 19, 20, 22, 24, 25, 32, 34], "visible_class": [3, 8], "class": [3, 5, 8], "selectattr": [3, 8], "list": [3, 8, 19, 20, 22, 23, 24, 25, 29, 32, 34, 36, 41], "els": [3, 4, 7, 8], "rejectattr": [3, 8], "klass": [3, 8], "render": [3, 8], "visible_properti": 3, "properti": [3, 6, 7, 10, 19, 22, 23, 24, 25], "visible_attribut": [3, 8], "attribut": [3, 8, 15, 16], "visible_method": 3, "method": [3, 7, 24, 25], "name": [4, 8, 11, 18, 19, 20, 23, 24, 25, 45], "annot": [4, 10, 21], "i": [4, 6, 7, 8, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 29, 32, 34, 36, 41], "none": [4, 6, 7, 8, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 38, 40, 41, 42, 43, 46, 47], "valu": [4, 11, 15, 16, 19, 20, 21, 23, 25, 28, 41], "string": [4, 19, 21, 23, 25, 37], "splitlin": 4, "count": 4, "multilin": 4, "width": [4, 34, 36], "8": [4, 19, 25], "blank": 4, "true": [4, 19, 20, 24, 25, 28, 41, 45], "r": [4, 19, 25, 33, 34], "truncat": 4, "100": [4, 42, 43], "function": [6, 8, 22, 24], "orphan": 8, "nest": 8, "pars": [8, 21, 23], "block": 8, "subpackag": 8, "visible_subpackag": 8, "toctre": 8, "titlesonli": 8, "maxdepth": 8, "index": [8, 19, 24, 25, 37, 49], "endblock": 8, "submodul": 8, "visible_submodul": 8, "content": 8, "all": [8, 19, 22, 23, 24, 25, 28, 41], "visible_children": 8, "children": [8, 21], "elif": 8, "equalto": 8, "packag": [8, 18, 24], "import": 8, "titl": [8, 19, 25], "visible_funct": 8, "modul": [8, 9, 49], "summari": 8, "scope": 8, "id": 8, "obj_item": 8, "0": [8, 19, 20, 21, 22, 23, 24, 25, 32, 34, 36, 37, 38, 39, 42, 43, 46, 47], "basicparamet": 11, "wavelength": [11, 14, 15, 16, 42, 43], "hypercube_l1": [11, 14], "hypso_info": [11, 12, 14], "lat_2d_arrai": [11, 14], "lon_2d_arrai": [11, 14], "time_captur": [11, 14], "get": [11, 15, 16, 19, 22, 23, 25, 45], "paramet": [11, 15, 16, 20, 21, 22, 23, 24, 28, 29, 30, 32, 34, 38, 41, 42, 43, 45, 46, 47], "you": [11, 18], "need": [11, 22, 25, 32, 34], "6": [11, 19, 25], "correct": [11, 16, 20, 28, 41, 48], "clip_srf": 11, "single_wl": 11, "single_srf": 11, "atmosphericcorrect": 11, "bandid": 11, "sixsinputparamet": 11, "py6s_dict": [11, 14], "srf": [11, 14], "call": [11, 18, 24, 25], "model": 11, "assign": [11, 20], "obtain": 11, "get_surface_reflect": 11, "radiance_band": 11, "py6s_result": 11, "calcul": [11, 13, 22, 24, 25, 47], "surfac": 11, "reflect": [11, 23], "from": [11, 15, 16, 19, 21, 24, 25, 34, 36, 45], "sensor": 11, "radianc": 11, "given": [11, 15, 16, 19, 20, 23, 25, 33, 34], "waveband": 11, "get_corrected_radi": 11, "run_py6": [11, 14], "get_acolite_repo": [12, 14], "reset_config_fil": 12, "path": [12, 15, 16, 18, 19, 20, 23, 24, 25, 28, 30, 38, 41, 42, 43, 45, 46, 47], "run_acolit": [12, 14], "atmos_dict": [12, 14, 28, 41], "nc_file_acolitereadi": [12, 14], "meandem": 13, "pointul": 13, "pointdr": 13, "averag": [13, 15, 16], "elev": 13, "area": [13, 23], "where": [13, 19, 20, 22, 25], "imag": [13, 15, 17, 19, 20, 21, 23, 24, 25, 26, 33, 34, 41, 42, 43, 48], "locat": 13, "atmospheric_correction_6sv1": [14, 41, 48], "atmospheric_correction_acolit": [14, 41, 48], "crop_and_bin_matrix": [15, 16], "matrix": [15, 16, 19, 22, 25, 32, 34], "x_start": [15, 16], "x_stop": [15, 16], "y_start": [15, 16], "y_stop": [15, 16], "bin_x": [15, 16], "bin_i": [15, 16], "crop": [15, 16, 28, 41], "aoi": [15, 16], "bin": [15, 16, 28, 41], "so": [15, 16, 19, 25], "number": [15, 16, 19, 22, 25, 32, 33, 34], "pixel": [15, 16, 20, 22, 24, 25, 33, 34], "store": [15, 16, 19, 25], "get_coefficients_from_fil": [15, 16], "coeff_path": [15, 16], "str": [15, 16, 19, 20, 25, 28, 41, 42, 43, 45, 46, 47], "return": [15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 32, 33, 34, 35, 37, 41, 42, 43, 45, 46, 47], "numpi": [15, 16, 20, 21, 32, 34, 43, 45, 47], "ndarrai": [15, 16, 20, 43, 45], "get_coefficients_from_dict": [15, 16], "coeff_dict": [15, 16], "satobj": [15, 16, 38, 40, 43], "coeffici": [15, 16, 28, 41], "csv": [15, 16], "file": [15, 16, 19, 22, 23, 24, 25, 28, 41], "option": [15, 16, 18, 21, 22, 24, 25, 42, 43], "radiometr": [15, 16, 28, 41], "default": [15, 16, 20, 24, 25, 42, 43], "rad_fil": [15, 16], "us": [15, 16, 19, 22, 24, 25, 28, 41, 43], "np": [15, 16, 19, 25], "The": [15, 16, 18, 19, 20, 22, 23, 24, 25, 33, 34, 36, 42, 43, 45], "param": [15, 16, 19, 20, 22, 23, 24, 25, 42, 43], "dict": [15, 16, 24, 25, 28, 30, 38, 41, 45], "calibrate_cub": [15, 16], "info_sat": [15, 16], "raw_cub": [15, 16], "correction_coefficients_dict": [15, 16], "raw": [15, 16], "cube": [15, 16, 28, 41, 47], "apply_radiometric_calibr": 15, "frame": [15, 16, 28, 41], "exp": 15, "background_valu": 15, "radiometric_calibration_coeffici": 15, "assum": [15, 28, 41], "input": [15, 19, 24, 25, 32, 34], "12": [15, 28, 33, 34, 41], "bit": [15, 28, 41], "ar": [15, 19, 20, 22, 24, 25, 28, 32, 34, 41], "same": [15, 19, 22, 25], "size": [15, 19, 20, 25, 28, 41, 47], "note": 15, "have": [15, 20, 22, 25, 34, 36], "origin": [15, 19, 22, 24, 25], "684": [15, 37, 38], "1080": 15, "match": [15, 20, 21], "normal": [15, 19, 24, 25], "smile_correction_one_row": 15, "row": [15, 16], "w": 15, "w_ref": 15, "cubic": 15, "spline": 15, "interpol": [15, 21], "resampl": 15, "one": 15, "onto": 15, "band": [15, 16, 19, 21, 22, 23, 24, 25, 40], "refer": [15, 16, 22, 25, 38, 41, 49], "arrai": [15, 19, 20, 21, 22, 23, 24, 25, 32, 34, 42, 43, 47], "smile": [15, 16, 28, 41], "effect": 15, "smile_correction_one_fram": 15, "spectral_band_matrix": 15, "run": [15, 16, 22, 24, 25], "each": [15, 16, 19, 22, 23, 25], "center": [15, 16, 33, 34, 47], "smile_correct_cub": [15, 16], "destriping_correct_cub": [15, 16], "appli": [15, 16, 20, 22, 23, 25], "destrip": [15, 16, 28, 41], "common": [17, 22, 25, 26, 48], "external_mask": [17, 18, 19, 23, 25, 26, 48], "glint": [17, 19, 23, 25, 26, 48], "inputoutput": [17, 25, 26, 48], "runwaterdetect": [17, 26, 41, 48], "main": [18, 24, 25, 33, 34], "just": 18, "wrapper": 18, "entri": 18, "point": [18, 32, 34, 36, 47], "script": [18, 24, 25], "With": 18, "instal": 18, "can": [18, 21, 22, 25, 33, 34], "h": 18, "command": 18, "prompt": 18, "see": 18, "debug": [18, 40], "debug_path": 18, "list_fil": 18, "fals": [18, 19, 20, 23, 24, 25, 28, 38, 40, 41], "process_ext_mask": 18, "process": [18, 20, 22, 23, 24, 25, 41], "an": [18, 19, 20, 21, 22, 24, 25, 32, 33, 34], "extern": 18, "mask": [18, 19, 20, 21, 22, 23, 24, 25], "prepar": [18, 23], "consum": 18, "test_ini": 19, "dwbaseconfig": [19, 25], "config_fil": [19, 24, 25], "_default": [19, 25], "_unit": 19, "load_config_fil": 19, "return_default": 19, "section": 19, "kei": [19, 22, 23, 24, 25], "get_opt": 19, "evalu": 19, "bool": [19, 46, 47], "dwconfig": [19, 22, 25], "reference_band": [19, 25], "create_composit": [19, 25], "pdf_report": [19, 25], "calc_glint": [19, 25], "glint_mod": [19, 25], "min_glint_multipli": [19, 21, 25], "pdf_resolut": [19, 25], "pekel_wat": [19, 25], "pekel_accuraci": [19, 25], "save_indic": [19, 25], "texture_stretch": [19, 25], "mask_nam": [19, 23, 25], "mask_valid_valu": [19, 23, 25], "mask_invalid_valu": [19, 23, 25], "maximum_invalid": [19, 25], "average_result": [19, 25], "min_positive_pixel": [19, 25], "clustering_method": [19, 25], "linkag": [19, 25], "train_siz": [19, 25], "regular": [19, 25], "min_train_s": [19, 25], "max_train_s": [19, 25], "score_index": [19, 25], "classifi": [19, 22, 25], "detect_water_clust": [19, 25], "min_clust": [19, 25], "max_clust": [19, 25], "plot_graph": [19, 25], "graphs_band": [19, 25], "plot_t": [19, 25], "clustering_band": [19, 25], "clip_band": [19, 23, 25], "clip_inf_valu": [19, 25], "clip_sup_valu": [19, 25], "_config_fil": [19, 25], "ini": [19, 24, 25], "get_masks_list": [19, 25], "product": [19, 21, 23, 24, 25, 28, 38, 40, 41], "dwutil": [19, 25], "indic": [19, 24, 25, 33, 34, 37], "static": [19, 21, 22, 23, 24, 25], "parse_sat_nam": [19, 25], "folder": [19, 21, 23, 24, 25, 45], "img_typ": [19, 20, 25], "s2_theia": [19, 20, 21, 23, 24, 25], "parse_planetary_nam": [19, 25], "m": [19, 25, 42, 43], "planetari": [19, 25], "extract": [19, 21, 22, 23, 24, 25], "inform": [19, 23, 24, 25], "dictionari": [19, 22, 23, 24, 25], "parse_maja_nam": [19, 25], "maja": [19, 25], "img": [19, 20, 21, 25, 43], "theia": [19, 25], "format": [19, 21, 22, 25, 37], "parse_s2cor_nam": [19, 25], "s2cor": [19, 25], "safe": [19, 25], "bitwise_or": [19, 25], "bit_valu": [19, 25], "bitwise_and": [19, 25], "flatten": [19, 25], "x": [19, 25, 28, 33, 34, 36, 41], "listifi": [19, 25], "lst": [19, 25], "uniqu": [19, 25], "check_path": [19, 25], "path_str": [19, 25], "is_dir": [19, 25], "check": [19, 22, 25], "exist": [19, 23, 25], "variabl": [19, 25], "test": [19, 22, 25], "whether": [19, 25], "directori": [19, 20, 23, 24, 25, 28, 41], "get_directori": [19, 25], "input_fold": [19, 23, 24, 25], "These": [19, 25], "repositori": [19, 25], "satellit": [19, 20, 24, 25, 33, 34, 41], "e": [19, 25], "calc_normalized_differ": [19, 25], "img1": [19, 25], "img2": [19, 25], "compress_ct": [19, 25], "02": [19, 25], "calc": [19, 25], "differ": [19, 24, 25], "updat": [19, 24, 25], "ani": [19, 25], "invalid": [19, 20, 22, 25], "ex": [19, 23, 25], "inf": [19, 21, 25], "nan": [19, 25], "encount": [19, 22, 25], "first": [19, 24, 25], "second": [19, 24, 25, 34, 35], "initi": [19, 25], "amount": [19, 25], "compress": [19, 25], "greater": [19, 25], "more": [19, 23, 25], "toward": [19, 25], "nd": [19, 25], "fill": [19, 25], "9999": [19, 25], "itself": [19, 24, 25], "calc_mbwi": [19, 24, 25], "factor": [19, 24, 25], "rgb_burn_in": [19, 25], "red": [19, 23, 25, 42, 43], "green": [19, 23, 24, 25, 42, 43], "blue": [19, 23, 25, 42, 43], "burn_in_arrai": [19, 24, 25], "color": [19, 24, 25], "min_valu": [19, 24, 25, 42, 43], "max_valu": [19, 24, 25, 42, 43], "colormap": [19, 24, 25], "viridi": [19, 24, 25], "fade": [19, 24, 25], "uniform_distribut": [19, 24, 25], "no_data_valu": [19, 23, 24, 25], "valid_valu": [19, 20, 24, 25], "transp": [19, 24, 25], "burn": [19, 25], "specif": [19, 22, 23, 25], "rgb": [19, 21, 24, 25, 42, 43], "visual": [19, 25], "purpos": [19, 25], "copi": [19, 20, 25], "convert": [19, 22, 25], "uniform": [19, 25], "histogram": [19, 25, 43], "matplotlib": [19, 25], "ramp": [19, 25], "maximum": [19, 24, 25], "minimum": [19, 24, 25], "burnt": [19, 25], "ne": [19, 25], "unconsid": [19, 25], "tupl": [19, 25, 34, 36], "g": [19, 25], "b": [19, 25], "emphas": [19, 25], "transpar": [19, 25], "opaqu": [19, 25], "complet": [19, 23, 25], "apply_mask": [19, 25], "clear_nan": [19, 25], "gray2color_ramp": [19, 25], "grey_arrai": [19, 25], "color1": [19, 25], "color2": [19, 25], "color3": [19, 25], "20": [19, 23, 25], "limit": [19, 25], "greyscal": [19, 25], "n": [19, 25, 32, 34, 46, 47], "dimension": [19, 25], "ad": [19, 23, 25], "dimens": [19, 25], "mix": [19, 25], "we": [19, 24, 25], "consid": [19, 25], "max": [19, 22, 25], "grei": [19, 25], "min": [19, 22, 25], "vector": [19, 21, 22, 25, 32, 34], "mid": [19, 25], "final": [19, 25], "boundari": [19, 25], "array2rast": [19, 25], "filenam": [19, 21, 23, 25, 28, 30, 40, 41], "geo_transform": [19, 23, 25], "project": [19, 23, 25], "nodatavalu": [19, 25], "dtype": [19, 23, 25], "array2rgb_rast": [19, 25], "tif_2_pdf": [19, 25], "tif_fil": [19, 25], "resolut": [19, 21, 25, 33, 34], "600": [19, 25], "scale": [19, 25], "2000": [19, 25], "tif": [19, 25], "pdf": [19, 21, 23, 25], "array2multiband": [19, 25], "get_train_test_data": [19, 25], "split": [19, 25], "provid": [19, 25], "train": [19, 25], "bunch": [19, 25], "quantiti": [19, 25], "percentag": [19, 25], "dataset": [19, 25], "plot_clustered_data": [19, 25], "cluster_nam": [19, 25], "file_nam": [19, 25], "graph_opt": [19, 25], "pdf_merger": [19, 24, 25], "labels_arrai": [19, 25], "graph_titl": [19, 25], "invalid_mask": [19, 22, 25], "max_point": [19, 25], "1000": [19, 25], "folder_nam": [19, 25], "offset": [19, 23, 25, 32, 34], "create_bands_dict": [19, 25], "bands_arrai": [19, 25], "bands_ord": [19, 25], "create_colorbar_pdf": [19, 24, 25], "product_nam": [19, 22, 23, 24, 25], "label": [19, 22, 25], "log_scal": [19, 25], "find_file_glob": [19, 25], "file_str": [19, 25], "read_gdal_d": [19, 25], "shape_fil": [19, 23, 24, 25], "temp_dir": [19, 23, 25], "read": [19, 25, 41, 48], "gdal": [19, 23, 25], "clip": [19, 24, 25], "shapefil": [19, 23, 25], "necessari": [19, 24, 25], "filepath": [19, 25], "etc": [19, 25], "pathlib": [19, 20, 25, 28, 30, 38, 41, 45, 46, 47], "temporari": [19, 25], "extract_angles_from_xml": [19, 25], "xml": [19, 21, 25], "zenith": [19, 25], "azimuth": [19, 25], "angl": [19, 25, 32, 34], "sentinel": [19, 23, 25], "2": [19, 22, 25, 26, 27, 34, 36], "descript": [19, 25], "metadata": [19, 23, 25, 28, 41, 45], "l2a": [19, 25], "exampl": [19, 24, 25], "sentinel2a_20200328": [19, 25], "104846": [19, 25], "345_l2a_t31tfj_c_v2": [19, 25], "2_mtd_all": [19, 25], "sza": [19, 25], "float": [19, 25, 32, 33, 34, 42, 43], "sun": [19, 25], "saza": [19, 25], "zenith_angl": [19, 25], "mean_viewing_incidence_angle_list": [19, 25], "azimuth_angl": [19, 25], "write_pdf": [19, 25], "text": [19, 25, 37], "300": [19, 25], "50": [19, 21, 25, 40], "posit": [19, 22, 25, 28, 41], "5": [19, 21, 24, 25, 47], "font_color": [19, 25], "create_glint_pdf": [19, 25], "name_img": [19, 25], "output_fold": [19, 23, 24, 25], "add": [19, 24, 25], "report": [19, 23, 25], "current_imagenam": [19, 25], "current": [19, 20, 23, 24, 25], "output": [19, 23, 24, 25], "element": [19, 25, 32, 34, 36], "remove_neg": [19, 25], "negative_valu": [19, 25], "remov": [19, 25], "neg": [19, 25], "b1": [19, 25], "b2": [19, 25], "except": [19, 23, 25], "adjust": [19, 21, 25, 28, 32, 34, 41, 43], "fix": [19, 25], "replac": [19, 25], "001": [19, 25], "shift": [19, 25], "its": [19, 25], "everi": [19, 25], "ha": [19, 20, 23, 25, 28, 32, 34, 36, 41], "onli": [19, 22, 25], "shift_al": [19, 25], "up": [19, 25], "without": [19, 25], "search_mask": 20, "img_path": 20, "masks_path": 20, "s2_s2cor": [20, 21, 24, 25], "msk_type": [20, 25], "find": [20, 22, 23, 25, 32, 34], "otherwis": 20, "done": [20, 22, 25], "convent": 20, "s2_planetari": [20, 21], "support": [20, 22, 25], "union": [20, 28, 41], "set_mask_flag": 20, "flag": [20, 25], "dilat": [20, 25], "other": [20, 22, 25], "boolean": 20, "geotiff": [20, 28, 41], "shall": [20, 34, 36], "int": [20, 33, 34], "process_mask": 20, "invalid_valu": 20, "255": 20, "remain": 20, "At": 20, "end": 20, "save": [20, 23, 24, 25, 42, 43], "should": [20, 24, 25, 33, 34], "valid": 20, "kernel": 20, "squar": 20, "noth": [20, 23, 33, 34], "prepare_external_mask": [20, 25], "imgs_dir": [20, 25], "masks_dir": [20, 25], "dwglintprocessor": 21, "limit_angl": 21, "30": 21, "supported_product": 21, "classmethod": [21, 24, 25], "get_grid_values_from_xml": 21, "tree_nod": 21, "xpath_str": 21, "receiv": [21, 28, 41], "tree": 21, "node": 21, "xpath": 21, "search": [21, 22, 25, 49], "Then": 21, "v1": 21, "v2": 21, "v3": 21, "v4": 21, "v5": 21, "v6": 21, "through": [21, 24, 25], "comput": 21, "mean": [21, 22, 25], "create_glint_arrai": 21, "xml_file": 21, "create_annotated_heatmap": 21, "hm": 21, "cmap": 21, "magma": 21, "vmin": 21, "7": 21, "vmax": 21, "9": [21, 26, 27], "heatmap": 21, "background": 21, "blend": 21, "nn_interpol": 21, "arr": [21, 47], "new_siz": 21, "nearest": 21, "neighbor": 21, "post": 21, "http": [21, 23, 29, 41], "gist": 21, "github": 21, "com": 21, "keremturgutlu": 21, "68feb119c9dd148285be2e247267a203": 21, "create_glint_heatmap": 21, "glint_arr": 21, "save_heatmap": 21, "glint_heatmap": 21, "dpi": 21, "bright": [21, 24, 25], "create_multiplication_coef": 21, "show_multiplication_coef": 21, "glint_adjusted_threshold": 21, "thresh_typ": 21, "threshold": [21, 46, 47], "sup": 21, "__repr__": [21, 24, 25], "repr": [21, 24, 25], "self": [21, 22, 24, 25], "dwimageclust": [22, 25], "bands_kei": [22, 25], "config": [22, 25], "glint_processor": [22, 24, 25], "get_necessary_band": [22, 25], "parametr": [22, 25], "algorithm": [22, 24, 25], "check_necessary_band": [22, 25], "combin": [22, 24, 25], "cluster": [22, 24, 25], "avail": [22, 25], "thei": [22, 25], "shape": [22, 24, 25, 34, 36, 37], "bands_to_column": [22, 25], "column": [22, 25, 32, 34], "It": [22, 24, 25], "follow": [22, 25, 34, 36], "order": [22, 25], "apply_clust": [22, 25], "best_k": [22, 25], "find_best_k": [22, 25], "best": [22, 25], "accord": [22, 23, 25], "metric": [22, 25], "calc_clusters_param": [22, 25], "clusters_label": [22, 25], "varianc": [22, 25], "std": [22, 25], "dev": [22, 25], "statist": [22, 25], "identify_water_clust": [22, 25], "water": [22, 24, 25, 26, 41, 48], "within": [22, 25], "mndwi": [22, 25], "mbwi": [22, 24, 25], "mir2": [22, 25], "detect_clust": [22, 25], "logic": [22, 25], "band1": [22, 24, 25], "band2": [22, 24, 25], "detect": [22, 24, 25], "which": [22, 25, 33, 34], "relat": [22, 25], "satisfi": [22, 25], "supervised_classif": [22, 25], "train_data": [22, 25], "machin": [22, 25], "learn": [22, 25], "supervis": [22, 25], "new": [22, 25], "apply_svm": [22, 25], "clusters_data": [22, 25], "apply_naive_bay": [22, 25], "naiv": [22, 25], "bay": [22, 25], "apply_mlp": [22, 25], "multilay": [22, 23, 25], "perceptron": [22, 25], "get_cluster_param": [22, 25], "clusters_param": [22, 25], "k": [22, 25], "verify_clust": [22, 25], "create_matrice_clust": [22, 25], "indices_arrai": [22, 25], "recreat": [22, 25], "split_data_by_band": [22, 25], "selected_kei": [22, 25], "desir": [22, 25], "select": [22, 23, 25], "create_product_nam": [22, 25], "apply_canny_treshold": [22, 25], "apply_otsu_treshold": [22, 25], "run_detect_wat": [22, 25], "detect_wat": [22, 25], "index_of_kei": [22, 25], "separate_high_low_mndwi": [22, 25], "dwloader": 23, "ref_band": 23, "single_mod": [23, 24, 25], "product_dict": 23, "area_nam": 23, "current_image_fold": 23, "full": 23, "posixpath": 23, "current_image_nam": 23, "bands_path": 23, "depend": 23, "granule_metadata": 23, "": [23, 33, 34], "granul": 23, "glint_nam": 23, "x_size": 23, "y_size": 23, "satellite_dict": 23, "band_id": 23, "__len__": 23, "__iter__": 23, "__next__": 23, "get_bands_fil": 23, "retriev": 23, "posix_path": 23, "open_current_imag": 23, "ref_band_nam": 23, "load": [23, 41, 44, 48], "image_list": 23, "bandnam": 23, "identifi": 23, "b3": 23, "b4": 23, "result": [23, 24, 25], "gdaldataset": 23, "open_gdal_imag": 23, "bands_list": 23, "desired_band": 23, "correspond": 23, "open": 23, "rasterimag": 23, "If": [23, 24, 25], "cant": 23, "than": 23, "rais": 23, "bands_to_clip": 23, "get_offset": 23, "sen2cor": 23, "after": 23, "25": 23, "januari": 23, "2022": 23, "copernicu": 23, "eu": 23, "document": 23, "247904": 23, "4830984": 23, "ompc": 23, "c": 23, "dqr": 23, "002": [23, 46, 47], "07": 23, "20i52r0": 23, "20msi": 23, "20l2a": 23, "20dqr": 23, "20august": 23, "202022": 23, "36edbb04": 23, "0c6c": 23, "fba3": 23, "5c34": 23, "0ba3be82e91c": 23, "load_raster_band": 23, "update_mask": 23, "load_mask": 23, "product_masks_list": 23, "dwsaver": 23, "set_output_fold": 23, "image_nam": 23, "For": [23, 24, 25], "saver": 23, "base_output_fold": 23, "being": 23, "geo": 23, "transform": 23, "raster": [23, 24, 25], "update_geo_transform": 23, "create_base_nam": 23, "create_output_fold": 23, "save_arrai": 23, "opt_relative_path": [23, 24, 25], "save_rgb_arrai": 23, "save_multiband": 23, "want": 23, "dws2cormaskprocessor": 23, "base_fold": 23, "sen2cormasklist": 23, "open_mask": 23, "open_gdal_mask": 23, "get_combined_mask": 23, "masks_list": 23, "dwlandsatmaskprocessor": 23, "landsatmaskdict": 23, "dwtheiamaskprocessor": 23, "theiamaskdict": 23, "theiaclmdict": 23, "theiamg2dict": 23, "dwwaterdetect": [24, 25], "pekel": [24, 25], "kwarg": [24, 25, 33, 34], "water_mask": [24, 25], "cluster_matrix": [24, 25], "necessary_band": [24, 25], "include_rgb": [24, 25], "graphic": [24, 25], "specifi": [24, 25, 47], "composit": [24, 25], "calc_nd_index": [24, 25], "index_nam": [24, 25], "save_index": [24, 25], "loader": [24, 25], "calc_m_nd_index": [24, 25], "band3": [24, 25], "band4": [24, 25], "modifi": [24, 25], "propos": [24, 25], "dhalton": [24, 25], "visibl": [24, 25], "nir": [24, 25], "swir": [24, 25], "inid": [24, 25], "multi": [24, 25], "multipli": [24, 25, 28, 41], "paper": [24, 25], "calc_awei": [24, 25], "awei": [24, 25], "run_water_detect": [24, 25], "post_callback": [24, 25], "launch": [24, 25], "uncompress": [24, 25], "batch": [24, 25], "multipl": [24, 25], "time": [24, 25, 32, 34, 37, 38, 41, 48], "l8_usg": [24, 25], "s2_l1c": [24, 25], "configur": [24, 25], "dir": [24, 25], "occurr": [24, 25], "map": [24, 25, 33, 34, 41, 42, 48], "like": [24, 25], "waterqu": [24, 25], "addit": [24, 25, 32, 34], "instanc": [24, 25], "_detect_wat": [24, 25], "intend": [24, 25], "variou": [24, 25], "unzip": [24, 25], "att": [24, 25], "parent": [24, 25], "singl": [24, 25], "test_pekel": [24, 25], "dw_imag": [24, 25], "pdf_merger_imag": [24, 25], "save_report": [24, 25], "report_nam": [24, 25], "save_graph": [24, 25], "create_water_mask": [24, 25], "band_combin": [24, 25], "param_nam": [24, 25], "unit": [24, 25, 32, 34], "create_rgb_burn_in_pdf": [24, 25], "calc_index": [24, 25], "indexes_list": [24, 25], "__version__": 25, "15": 25, "dwproduct": 25, "landsat8_usg": 25, "sentinel2_theia": 25, "sentinel2_esa": 25, "sentinel2_l1c": 25, "waterdetect": [26, 41, 48], "ndwi_watermask": [26, 27], "sat_obj": [26, 27, 42, 43], "product_to_us": [26, 27], "l1c": [26, 27], "threshold_watermask": [26, 27], "threshold_v": [26, 27], "experimental_featur": [28, 45], "set_or_create_attr": 28, "var": 28, "attr_nam": 28, "attr_valu": 28, "hypso_path": [28, 41], "points_path": [28, 30, 38, 41], "get_srf": [28, 41], "create_l1b_nc_fil": [28, 41], "hypso_nc_path": [28, 41], "create_geotiff": [28, 41], "l2": [28, 41], "force_reload": [28, 41], "delete_geotiff_dir": [28, 41], "top_folder_nam": [28, 41, 45], "find_geotiff": [28, 41], "find_existing_l2_cub": [28, 41], "get_projection_metadata": [28, 41], "get_calibration_coefficients_path": [28, 41], "get_spectral_coefficients_path": [28, 41], "get_spectra": [28, 41], "position_dict": [28, 41], "postyp": [28, 41], "coord": [28, 41], "plot": [28, 41, 48], "l2_engin": [28, 41], "6sv1": [28, 41], "files_path": [28, 41], "work": [28, 41], "integr": [28, 41], "cr": [28, 41], "lat": [28, 32, 33, 34, 37, 41, 43], "lon": [28, 32, 33, 34, 37, 41, 43], "y": [28, 33, 34, 36, 41, 43], "pix": [28, 41], "posty": [28, 41], "latitud": [28, 33, 34, 41], "longitud": [28, 33, 34, 41], "pass": [28, 41], "get_calibrated_and_corrected_cub": [28, 41], "calibr": [28, 41, 48], "includ": [28, 41], "been": [28, 41], "toa_reflectance_from_toa_radi": [28, 41], "download_nc_fil": [29, 41], "filename_list": [29, 41], "output_dir": [29, 41], "server_url": [29, 41], "web": [29, 41], "ntnu": [29, 41], "1_l1a": [29, 41], "start_coordinate_correct": [30, 38], "satinfo": [30, 38], "proj_metadata": [30, 38], "correction_typ": [30, 38], "affin": [30, 38], "coordinate_correction_matrix": 30, "projection_metadata": 30, "point_fil": 30, "originallat": 30, "originallon": 30, "nc_path": [31, 38], "nc_info": [31, 38], "minimum_bounding_rectangl": [32, 34], "smallest": [32, 34], "bound": [32, 34, 36], "rectangl": [32, 34], "repres": [32, 34], "corner": [32, 33, 34, 36], "box": [32, 34, 36], "nx2": [32, 34], "coordin": [32, 33, 34], "rval": [32, 34], "4x2": [32, 34], "mat_from_quat": [32, 34], "quat": [32, 34], "must": [32, 33, 34], "four": [32, 34, 36], "4": [32, 34, 36], "nump": [32, 34], "3x3": [32, 34], "rotat": [32, 34], "rotate_axis_angl": [32, 34], "vec": [32, 34], "axi": [32, 34], "around": [32, 34], "both": [32, 34], "vec_rot": [32, 34], "radian": [32, 34], "r_eq": [32, 34, 37], "6378137": [32, 34, 37], "f": [32, 34, 37, 41], "6378388": 32, "e_2": [32, 34, 37], "r_pl": [32, 34, 37], "6356752": [32, 34, 37], "ecef_to_lat_lon_alt": [32, 34], "po": [32, 34, 43], "nx3": [32, 34], "meter": [32, 34], "respect": [32, 34], "eci": [32, 34], "ax": [32, 34, 37], "altitud": [32, 34], "degre": [32, 34, 47], "eci_to_lat_loneci_alt": [32, 34], "eci_lon_to_ecef_lon": [32, 34], "datetime_utc": [32, 34], "time_offset": [32, 34], "eci_to_lat_lon_alt": [32, 34], "georeferenc": [32, 34], "pos_ecef_to_lat_lon_alt": [32, 34], "lat_lon_alt_to_ecef": [32, 34], "lla": [32, 34], "ellipsoid_line_intersect": [32, 34], "direct": [32, 34, 36], "pixel_to_latlon": [33, 34], "px_x": [33, 34], "px_y": [33, 34], "tl_x": [33, 34], "tl_y": [33, 34], "zoom_level": [33, 34], "googl": [33, 34], "tile": [33, 34], "top": [33, 34, 45], "left": [33, 34], "western": [33, 34], "zoom": [33, 34], "level": [33, 34], "also": [33, 34], "googlemapslay": [33, 34], "roadmap": [33, 34], "v": [33, 34], "terrain": [33, 34], "p": [33, 34], "altered_roadmap": [33, 34], "terrain_onli": [33, 34], "t": [33, 34], "hybrid": [33, 34], "googlemapdownload": [33, 34], "lng": [33, 34], "layer": [33, 34], "A": [33, 34, 41], "high": [33, 34], "latlon_to_tilexi": [33, 34], "generateimag": [33, 34], "stitch": [33, 34], "togeth": [33, 34], "center_tile_x": [33, 34], "center_tile_i": [33, 34], "tile_count_x": [33, 34], "wide": [33, 34], "tile_count_i": [33, 34], "gool": [33, 34], "geometr": [34, 38, 41, 48], "gmap": [34, 38, 41, 48], "util": [34, 38, 41, 48], "gen_resample_grid": [34, 36], "grid_res_x": [34, 36], "grid_res_i": [34, 36], "bbox_coord_limit": [34, 36], "expect": [34, 36], "xmin": [34, 36], "xmax": [34, 36], "ymin": [34, 36], "ymax": [34, 36], "gen_resample_grid_bbox_min": [34, 36], "bbox_minim": [34, 36], "consist": [34, 36], "describ": [34, 36], "minim": [34, 36], "taken": [34, 36], "distanc": [34, 36, 47], "between": [34, 36, 47], "height": [34, 36], "go": [34, 36], "get_julian_day_numb": [34, 35], "date_tim": [34, 35], "get_greenwich_mean_sidereal_time_second": [34, 35], "sinc": [34, 35], "midnight": [34, 35], "sider": [34, 35], "dai": [34, 35], "hypso_height_sensor": 37, "1216": 37, "numpy_norm": 37, "np_arrai": 37, "compute_elevation_angl": 37, "image_po": 37, "sat_po": 37, "compute_off_nadir_angl": 37, "pixel_index_to_angl": 37, "aoi_offset": 37, "fov_ful": 37, "pixels_ful": 37, "compute_local_angl": 37, "pos_tem": 37, "latlon": 37, "compute_local_angles_2": 37, "get_wkt": 37, "top_latlon": 37, "bot_latlon": 37, "long": 37, "well": 37, "known": 37, "represent": 37, "get_wkt_point": 37, "latlon_top": 37, "latlon_mid_top": 37, "latlon_mid": 37, "latlon_mid_bot": 37, "latlon_bot": 37, "add_grid": 37, "lat_cent": 37, "lon_cent": 37, "seg_lat": 37, "seg_lon": 37, "size_lat_deg": 37, "size_lon_deg": 37, "geometry_comput": [37, 38], "framepose_data_path": [37, 38], "hypso_height": [37, 38], "georef": [38, 41, 48], "coordinate_correct": [38, 41, 48], "create_adcs_timestamps_fil": [38, 41, 48], "georef_plot": [38, 41, 48], "interpolate_at_fram": [38, 41, 48], "generate_rgb_geotiff": [38, 40], "overwrit": [38, 40], "generate_full_geotiff": [38, 40], "l2_kei": [38, 40], "pos_csv_path": [38, 39], "quat_csv_path": [38, 39], "flash_csv_path": [38, 39], "additional_time_offset": [38, 39], "framer": [38, 39], "exposur": [38, 39], "export_single_band": 40, "r_band_index": 40, "61": 40, "g_band_index": 40, "b_band_index": 40, "31": 40, "generate_geotiff": 40, "cube_data": 40, "interpolate_geotiff": 40, "band_numb": 40, "pixel_coords_map_list": 40, "grid_point": 40, "resampling_method": 40, "contain_mask": 40, "geotiff_info": 40, "grid_data_all_band": 40, "export_single_band_geotiff": 40, "raster_data": 40, "grid_dim": 40, "grid_origin": 40, "grid_r": 40, "grid_epsg": 40, "atmospher": [41, 48], "classif": [41, 48], "georefer": [41, 48], "devic": [41, 48], "download": [41, 48], "__author__": 41, "alvaro": 41, "flore": 41, "romero": 41, "__credits__": 41, "norwegian": 41, "univers": 41, "scienc": 41, "technologi": 41, "show_rgb_map": [42, 43], "satellite_obj": [42, 43], "plottitl": [42, 43], "dpi_input": [42, 43], "450": [42, 43], "write_rgb_to_png": [42, 43], "path_to_sav": [42, 43], "pil": [42, 43], "plot_array_overlai": [42, 43], "plot_arrai": [42, 43], "2d": [42, 43], "cbar_titl": [42, 43], "chlorophyl": [42, 43], "concentr": [42, 43], "mg": [42, 43], "01": [42, 43], "get_rgb": [42, 43], "write": [42, 43], "r_wl": [42, 43], "channel": [42, 43], "650": [42, 43], "g_wl": [42, 43], "550": [42, 43], "b_wl": [42, 43], "point_rgb_map": [42, 43], "patch_dict": [42, 43], "r_plot": [42, 43], "007": [42, 43], "plotzoom": 43, "axis_ext": 43, "image_ext": 43, "inproj_valu": 43, "tick_log_formatt": 43, "get_cartopy_axi": 43, "auto_adjust_img": 43, "contrast": 43, "equal": 43, "check_projection_geotiff": 43, "load_nc": [44, 45], "nc_file_path": [44, 45, 46, 47], "standarddimens": [44, 45], "get_lat_lon_2d": 45, "latitude_datapath": 45, "longitude_datapath": 45, "info": 45, "spatialdim": 45, "get_local_angl": 45, "sat_azimuth_path": 45, "sat_zenith_path": 45, "solar_azimuth_path": 45, "solar_zenith_path": 45, "get_metainfo_from_nc_fil": 45, "get_raw_cube_from_nc_fil": 45, "find_fil": [46, 47], "str_in_fil": [46, 47], "suffix": [46, 47], "partial": [46, 47], "is_integer_num": [46, 47], "find_dir": [46, 47], "str_in_dir": [46, 47], "hsi2rgb": [46, 47], "wy": [46, 47], "hsi": [46, 47], "d": [46, 47], "65": [46, 47], "print_nc": [46, 47], "find_all_fil": [46, 47], "myprogressbar": [46, 47], "text_prefix": [46, 47], "__call__": [46, 47], "block_num": [46, 47], "block_siz": [46, 47], "total_s": [46, 47], "compare_netcdf_fil": [46, 47], "file1": [46, 47], "file2": [46, 47], "flatten_dict": 47, "nested_dict": 47, "nested_dict_to_df": 47, "values_dict": 47, "navigate_recursive_nc": 47, "nc_file": 47, "depth": 47, "list_array_1d_to_str": 47, "recursive_print_nc": 47, "pseudo_convolut": 47, "watermask": 47, "find_closest_water_lat_lon_match": 47, "lat_2d": 47, "lon_2d": 47, "target_lat": 47, "target_lon": 47, "haversin": 47, "lon1": 47, "lat1": 47, "lon2": 47, "lat2": 47, "great": 47, "circl": 47, "two": 47, "earth": 47, "decim": 47, "hypso": 48}, "objects": {"": [[41, 0, 0, "-", "hypso"]], "hypso": [[41, 1, 1, "", "Hypso"], [41, 3, 1, "", "__author__"], [41, 3, 1, "", "__credits__"], [14, 0, 0, "-", "atmospheric"], [16, 0, 0, "-", "calibration"], [26, 0, 0, "-", "classification"], [28, 0, 0, "-", "device"], [29, 0, 0, "-", "download"], [41, 4, 1, "", "download_nc_files"], [38, 0, 0, "-", "georeference"], [42, 0, 0, "-", "plot"], [44, 0, 0, "-", "reading"], [46, 0, 0, "-", "utils"]], "hypso.Hypso": [[41, 2, 1, "", "create_geotiff"], [41, 2, 1, "", "create_l1b_nc_file"], [41, 2, 1, "", "delete_geotiff_dir"], [41, 2, 1, "", "find_existing_l2_cube"], [41, 2, 1, "", "find_geotiffs"], [41, 2, 1, "", "get_calibrated_and_corrected_cube"], [41, 2, 1, "", "get_calibration_coefficients_path"], [41, 2, 1, "", "get_projection_metadata"], [41, 2, 1, "", "get_spectra"], [41, 2, 1, "", "get_spectral_coefficients_path"], [41, 2, 1, "", "get_srf"], [41, 2, 1, "", "toa_reflectance_from_toa_radiance"]], "hypso.atmospheric": [[11, 0, 0, "-", "atmospheric_correction_6sv1"], [12, 0, 0, "-", "atmospheric_correction_acolite"], [13, 0, 0, "-", "base"], [14, 4, 1, "", "get_acolite_repo"], [14, 4, 1, "", "run_acolite"], [14, 4, 1, "", "run_py6s"]], "hypso.atmospheric.atmospheric_correction_6sv1": [[11, 4, 1, "", "AtmosphericCorrection"], [11, 4, 1, "", "BasicParameters"], [11, 4, 1, "", "clip_srf"], [11, 4, 1, "", "get_corrected_radiance"], [11, 4, 1, "", "get_surface_reflectance"], [11, 4, 1, "", "run_py6s"]], "hypso.atmospheric.atmospheric_correction_acolite": [[12, 4, 1, "", "get_acolite_repo"], [12, 4, 1, "", "reset_config_file"], [12, 4, 1, "", "run_acolite"]], "hypso.atmospheric.base": [[13, 4, 1, "", "MeanDEM"]], "hypso.calibration": [[16, 4, 1, "", "calibrate_cube"], [15, 0, 0, "-", "correction"], [16, 4, 1, "", "crop_and_bin_matrix"], [16, 4, 1, "", "destriping_correct_cube"], [16, 4, 1, "", "get_coefficients_from_dict"], [16, 4, 1, "", "get_coefficients_from_file"], [16, 4, 1, "", "smile_correct_cube"]], "hypso.calibration.correction": [[15, 4, 1, "", "apply_radiometric_calibration"], [15, 4, 1, "", "calibrate_cube"], [15, 4, 1, "", "crop_and_bin_matrix"], [15, 4, 1, "", "destriping_correct_cube"], [15, 4, 1, "", "get_coefficients_from_dict"], [15, 4, 1, "", "get_coefficients_from_file"], [15, 4, 1, "", "smile_correct_cube"], [15, 4, 1, "", "smile_correction_one_frame"], [15, 4, 1, "", "smile_correction_one_row"]], "hypso.classification": [[17, 0, 0, "-", "WaterDetect"], [26, 4, 1, "", "ndwi_watermask"], [26, 4, 1, "", "threshold_watermask"], [27, 0, 0, "-", "water"]], "hypso.classification.WaterDetect": [[18, 0, 0, "-", "runWaterDetect"], [25, 0, 0, "-", "waterdetect"]], "hypso.classification.WaterDetect.runWaterDetect": [[18, 4, 1, "", "debug"], [18, 4, 1, "", "debug_path"], [18, 4, 1, "", "main"], [18, 4, 1, "", "process_ext_masks"]], "hypso.classification.WaterDetect.waterdetect": [[19, 0, 0, "-", "Common"], [25, 1, 1, "", "DWConfig"], [25, 1, 1, "", "DWImageClustering"], [25, 1, 1, "", "DWProducts"], [25, 1, 1, "", "DWWaterDetect"], [25, 1, 1, "", "DWutils"], [20, 0, 0, "-", "External_mask"], [21, 0, 0, "-", "Glint"], [22, 0, 0, "-", "Image"], [23, 0, 0, "-", "InputOutput"], [24, 0, 0, "-", "WaterDetect"], [25, 3, 1, "", "__version__"], [25, 3, 1, "", "gdal"], [25, 4, 1, "", "prepare_external_masks"]], "hypso.classification.WaterDetect.waterdetect.Common": [[19, 1, 1, "", "DWBaseConfig"], [19, 1, 1, "", "DWConfig"], [19, 1, 1, "", "DWutils"], [19, 4, 1, "", "test_ini"]], "hypso.classification.WaterDetect.waterdetect.Common.DWBaseConfig": [[19, 5, 1, "", "_defaults"], [19, 5, 1, "", "_units"], [19, 2, 1, "", "get_option"], [19, 2, 1, "", "load_config_file"], [19, 2, 1, "", "return_defaults"]], "hypso.classification.WaterDetect.waterdetect.Common.DWConfig": [[19, 5, 1, "", "_config_file"], [19, 5, 1, "", "_defaults"], [19, 6, 1, "", "average_results"], [19, 6, 1, "", "calc_glint"], [19, 6, 1, "", "classifier"], [19, 6, 1, "", "clip_band"], [19, 6, 1, "", "clip_inf_value"], [19, 6, 1, "", "clip_sup_value"], [19, 6, 1, "", "clustering_bands"], [19, 6, 1, "", "clustering_method"], [19, 6, 1, "", "create_composite"], [19, 6, 1, "", "detect_water_cluster"], [19, 6, 1, "", "external_mask"], [19, 2, 1, "", "get_masks_list"], [19, 6, 1, "", "glint_mode"], [19, 6, 1, "", "graphs_bands"], [19, 6, 1, "", "linkage"], [19, 6, 1, "", "mask_invalid_value"], [19, 6, 1, "", "mask_name"], [19, 6, 1, "", "mask_valid_value"], [19, 6, 1, "", "max_clusters"], [19, 6, 1, "", "max_train_size"], [19, 6, 1, "", "maximum_invalid"], [19, 6, 1, "", "min_clusters"], [19, 6, 1, "", "min_glint_multiplier"], [19, 6, 1, "", "min_positive_pixels"], [19, 6, 1, "", "min_train_size"], [19, 6, 1, "", "pdf_reports"], [19, 6, 1, "", "pdf_resolution"], [19, 6, 1, "", "pekel_accuracy"], [19, 6, 1, "", "pekel_water"], [19, 6, 1, "", "plot_graphs"], [19, 6, 1, "", "plot_ts"], [19, 6, 1, "", "reference_band"], [19, 6, 1, "", "regularization"], [19, 6, 1, "", "save_indices"], [19, 6, 1, "", "score_index"], [19, 6, 1, "", "texture_stretching"], [19, 6, 1, "", "train_size"]], "hypso.classification.WaterDetect.waterdetect.Common.DWutils": [[19, 2, 1, "", "apply_mask"], [19, 2, 1, "", "array2multiband"], [19, 2, 1, "", "array2raster"], [19, 2, 1, "", "array2rgb_raster"], [19, 2, 1, "", "bitwise_and"], [19, 2, 1, "", "bitwise_or"], [19, 2, 1, "", "calc_mbwi"], [19, 2, 1, "", "calc_normalized_difference"], [19, 2, 1, "", "check_path"], [19, 2, 1, "", "create_bands_dict"], [19, 2, 1, "", "create_colorbar_pdf"], [19, 2, 1, "", "create_composite"], [19, 2, 1, "", "create_glint_pdf"], [19, 2, 1, "", "extract_angles_from_xml"], [19, 2, 1, "", "find_file_glob"], [19, 2, 1, "", "flatten"], [19, 2, 1, "", "get_directories"], [19, 2, 1, "", "get_train_test_data"], [19, 2, 1, "", "gray2color_ramp"], [19, 5, 1, "", "indices"], [19, 2, 1, "", "listify"], [19, 2, 1, "", "parse_maja_name"], [19, 2, 1, "", "parse_planetary_name"], [19, 2, 1, "", "parse_s2cor_name"], [19, 2, 1, "", "parse_sat_name"], [19, 2, 1, "", "plot_clustered_data"], [19, 2, 1, "", "plot_graphs"], [19, 2, 1, "", "read_gdal_ds"], [19, 2, 1, "", "remove_negatives"], [19, 2, 1, "", "rgb_burn_in"], [19, 2, 1, "", "tif_2_pdf"], [19, 2, 1, "", "write_pdf"]], "hypso.classification.WaterDetect.waterdetect.DWConfig": [[25, 5, 1, "", "_config_file"], [25, 5, 1, "", "_defaults"], [25, 6, 1, "", "average_results"], [25, 6, 1, "", "calc_glint"], [25, 6, 1, "", "classifier"], [25, 6, 1, "", "clip_band"], [25, 6, 1, "", "clip_inf_value"], [25, 6, 1, "", "clip_sup_value"], [25, 6, 1, "", "clustering_bands"], [25, 6, 1, "", "clustering_method"], [25, 6, 1, "", "create_composite"], [25, 6, 1, "", "detect_water_cluster"], [25, 6, 1, "", "external_mask"], [25, 2, 1, "", "get_masks_list"], [25, 6, 1, "", "glint_mode"], [25, 6, 1, "", "graphs_bands"], [25, 6, 1, "", "linkage"], [25, 6, 1, "", "mask_invalid_value"], [25, 6, 1, "", "mask_name"], [25, 6, 1, "", "mask_valid_value"], [25, 6, 1, "", "max_clusters"], [25, 6, 1, "", "max_train_size"], [25, 6, 1, "", "maximum_invalid"], [25, 6, 1, "", "min_clusters"], [25, 6, 1, "", "min_glint_multiplier"], [25, 6, 1, "", "min_positive_pixels"], [25, 6, 1, "", "min_train_size"], [25, 6, 1, "", "pdf_reports"], [25, 6, 1, "", "pdf_resolution"], [25, 6, 1, "", "pekel_accuracy"], [25, 6, 1, "", "pekel_water"], [25, 6, 1, "", "plot_graphs"], [25, 6, 1, "", "plot_ts"], [25, 6, 1, "", "reference_band"], [25, 6, 1, "", "regularization"], [25, 6, 1, "", "save_indices"], [25, 6, 1, "", "score_index"], [25, 6, 1, "", "texture_stretching"], [25, 6, 1, "", "train_size"]], "hypso.classification.WaterDetect.waterdetect.DWImageClustering": [[25, 2, 1, "", "apply_canny_treshold"], [25, 2, 1, "", "apply_cluster"], [25, 2, 1, "", "apply_clustering"], [25, 2, 1, "", "apply_mlp"], [25, 2, 1, "", "apply_naive_bayes"], [25, 2, 1, "", "apply_otsu_treshold"], [25, 2, 1, "", "apply_svm"], [25, 2, 1, "", "bands_to_columns"], [25, 2, 1, "", "calc_clusters_params"], [25, 2, 1, "", "check_necessary_bands"], [25, 2, 1, "", "create_matrice_cluster"], [25, 2, 1, "", "create_product_name"], [25, 2, 1, "", "detect_cluster"], [25, 2, 1, "", "find_best_k"], [25, 2, 1, "", "get_cluster_param"], [25, 2, 1, "", "get_necessary_bands"], [25, 2, 1, "", "identify_water_cluster"], [25, 2, 1, "", "index_of_key"], [25, 6, 1, "", "product_name"], [25, 2, 1, "", "run_detect_water"], [25, 2, 1, "", "separate_high_low_mndwi"], [25, 2, 1, "", "split_data_by_bands"], [25, 2, 1, "", "supervised_classification"], [25, 2, 1, "", "verify_cluster"]], "hypso.classification.WaterDetect.waterdetect.DWProducts": [[25, 5, 1, "", "Landsat8_USGS"], [25, 5, 1, "", "Sentinel2_ESA"], [25, 5, 1, "", "Sentinel2_L1C"], [25, 5, 1, "", "Sentinel2_THEIA"]], "hypso.classification.WaterDetect.waterdetect.DWWaterDetect": [[25, 2, 1, "", "__repr__"], [25, 2, 1, "", "_detect_water"], [25, 2, 1, "", "calc_awei"], [25, 2, 1, "", "calc_indexes"], [25, 2, 1, "", "calc_m_nd_index"], [25, 2, 1, "", "calc_mbwi"], [25, 2, 1, "", "calc_nd_index"], [25, 6, 1, "", "cluster_matrix"], [25, 2, 1, "", "create_colorbar_pdf"], [25, 2, 1, "", "create_rgb_burn_in_pdf"], [25, 2, 1, "", "create_water_mask"], [25, 2, 1, "", "necessary_bands"], [25, 2, 1, "", "run_water_detect"], [25, 2, 1, "", "save_graphs"], [25, 2, 1, "", "save_report"], [25, 2, 1, "", "test_pekel"], [25, 6, 1, "", "water_mask"]], "hypso.classification.WaterDetect.waterdetect.DWutils": [[25, 2, 1, "", "apply_mask"], [25, 2, 1, "", "array2multiband"], [25, 2, 1, "", "array2raster"], [25, 2, 1, "", "array2rgb_raster"], [25, 2, 1, "", "bitwise_and"], [25, 2, 1, "", "bitwise_or"], [25, 2, 1, "", "calc_mbwi"], [25, 2, 1, "", "calc_normalized_difference"], [25, 2, 1, "", "check_path"], [25, 2, 1, "", "create_bands_dict"], [25, 2, 1, "", "create_colorbar_pdf"], [25, 2, 1, "", "create_composite"], [25, 2, 1, "", "create_glint_pdf"], [25, 2, 1, "", "extract_angles_from_xml"], [25, 2, 1, "", "find_file_glob"], [25, 2, 1, "", "flatten"], [25, 2, 1, "", "get_directories"], [25, 2, 1, "", "get_train_test_data"], [25, 2, 1, "", "gray2color_ramp"], [25, 5, 1, "", "indices"], [25, 2, 1, "", "listify"], [25, 2, 1, "", "parse_maja_name"], [25, 2, 1, "", "parse_planetary_name"], [25, 2, 1, "", "parse_s2cor_name"], [25, 2, 1, "", "parse_sat_name"], [25, 2, 1, "", "plot_clustered_data"], [25, 2, 1, "", "plot_graphs"], [25, 2, 1, "", "read_gdal_ds"], [25, 2, 1, "", "remove_negatives"], [25, 2, 1, "", "rgb_burn_in"], [25, 2, 1, "", "tif_2_pdf"], [25, 2, 1, "", "write_pdf"]], "hypso.classification.WaterDetect.waterdetect.External_mask": [[20, 4, 1, "", "prepare_external_masks"], [20, 4, 1, "", "process_mask"], [20, 4, 1, "", "search_mask"], [20, 4, 1, "", "set_mask_flags"]], "hypso.classification.WaterDetect.waterdetect.Glint": [[21, 1, 1, "", "DWGlintProcessor"]], "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor": [[21, 2, 1, "", "__repr__"], [21, 2, 1, "", "create"], [21, 2, 1, "", "create_annotated_heatmap"], [21, 2, 1, "", "create_glint_array"], [21, 2, 1, "", "create_glint_heatmap"], [21, 2, 1, "", "create_multiplication_coefs"], [21, 2, 1, "", "get_grid_values_from_xml"], [21, 2, 1, "", "glint_adjusted_threshold"], [21, 2, 1, "", "nn_interpolate"], [21, 2, 1, "", "save_heatmap"], [21, 2, 1, "", "show_multiplication_coefs"], [21, 5, 1, "", "supported_products"]], "hypso.classification.WaterDetect.waterdetect.Image": [[22, 1, 1, "", "DWImageClustering"]], "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering": [[22, 2, 1, "", "apply_canny_treshold"], [22, 2, 1, "", "apply_cluster"], [22, 2, 1, "", "apply_clustering"], [22, 2, 1, "", "apply_mlp"], [22, 2, 1, "", "apply_naive_bayes"], [22, 2, 1, "", "apply_otsu_treshold"], [22, 2, 1, "", "apply_svm"], [22, 2, 1, "", "bands_to_columns"], [22, 2, 1, "", "calc_clusters_params"], [22, 2, 1, "", "check_necessary_bands"], [22, 2, 1, "", "create_matrice_cluster"], [22, 2, 1, "", "create_product_name"], [22, 2, 1, "", "detect_cluster"], [22, 2, 1, "", "find_best_k"], [22, 2, 1, "", "get_cluster_param"], [22, 2, 1, "", "get_necessary_bands"], [22, 2, 1, "", "identify_water_cluster"], [22, 2, 1, "", "index_of_key"], [22, 6, 1, "", "product_name"], [22, 2, 1, "", "run_detect_water"], [22, 2, 1, "", "separate_high_low_mndwi"], [22, 2, 1, "", "split_data_by_bands"], [22, 2, 1, "", "supervised_classification"], [22, 2, 1, "", "verify_cluster"]], "hypso.classification.WaterDetect.waterdetect.InputOutput": [[23, 1, 1, "", "DWLandsatMaskProcessor"], [23, 1, 1, "", "DWLoader"], [23, 1, 1, "", "DWS2CORMaskProcessor"], [23, 1, 1, "", "DWSaver"], [23, 1, 1, "", "DWTheiaMaskProcessor"]], "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLandsatMaskProcessor": [[23, 5, 1, "", "LandsatMaskDict"], [23, 2, 1, "", "get_combined_masks"], [23, 2, 1, "", "open_gdal_masks"], [23, 2, 1, "", "open_mask"]], "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader": [[23, 2, 1, "", "__iter__"], [23, 2, 1, "", "__len__"], [23, 2, 1, "", "__next__"], [23, 6, 1, "", "area_name"], [23, 5, 1, "", "band_ids"], [23, 6, 1, "", "bands_path"], [23, 2, 1, "", "clip_bands"], [23, 6, 1, "", "current_image_folder"], [23, 6, 1, "", "current_image_name"], [23, 6, 1, "", "geo_transform"], [23, 2, 1, "", "get_bands_files"], [23, 2, 1, "", "get_offset"], [23, 6, 1, "", "glint_name"], [23, 6, 1, "", "granule_metadata"], [23, 2, 1, "", "load_masks"], [23, 2, 1, "", "load_raster_bands"], [23, 6, 1, "", "metadata"], [23, 2, 1, "", "open_current_image"], [23, 2, 1, "", "open_gdal_image"], [23, 6, 1, "", "product_dict"], [23, 6, 1, "", "projection"], [23, 5, 1, "", "satellite_Dict"], [23, 2, 1, "", "update_mask"], [23, 6, 1, "", "x_size"], [23, 6, 1, "", "y_size"]], "hypso.classification.WaterDetect.waterdetect.InputOutput.DWS2CORMaskProcessor": [[23, 5, 1, "", "Sen2CorMaskList"], [23, 2, 1, "", "get_combined_masks"], [23, 2, 1, "", "open_gdal_masks"], [23, 2, 1, "", "open_mask"]], "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver": [[23, 6, 1, "", "area_name"], [23, 2, 1, "", "create_base_name"], [23, 2, 1, "", "create_output_folder"], [23, 2, 1, "", "save_array"], [23, 2, 1, "", "save_multiband"], [23, 2, 1, "", "save_rgb_array"], [23, 2, 1, "", "set_output_folder"], [23, 6, 1, "", "temp_dir"], [23, 2, 1, "", "update_geo_transform"]], "hypso.classification.WaterDetect.waterdetect.InputOutput.DWTheiaMaskProcessor": [[23, 5, 1, "", "TheiaCLMDict"], [23, 5, 1, "", "TheiaMG2Dict"], [23, 5, 1, "", "TheiaMaskDict"], [23, 2, 1, "", "get_combined_masks"], [23, 2, 1, "", "open_gdal_masks"], [23, 2, 1, "", "open_masks"]], "hypso.classification.WaterDetect.waterdetect.WaterDetect": [[24, 1, 1, "", "DWWaterDetect"]], "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect": [[24, 2, 1, "", "__repr__"], [24, 2, 1, "", "_detect_water"], [24, 2, 1, "", "calc_awei"], [24, 2, 1, "", "calc_indexes"], [24, 2, 1, "", "calc_m_nd_index"], [24, 2, 1, "", "calc_mbwi"], [24, 2, 1, "", "calc_nd_index"], [24, 6, 1, "", "cluster_matrix"], [24, 2, 1, "", "create_colorbar_pdf"], [24, 2, 1, "", "create_rgb_burn_in_pdf"], [24, 2, 1, "", "create_water_mask"], [24, 2, 1, "", "necessary_bands"], [24, 2, 1, "", "run_water_detect"], [24, 2, 1, "", "save_graphs"], [24, 2, 1, "", "save_report"], [24, 2, 1, "", "test_pekel"], [24, 6, 1, "", "water_mask"]], "hypso.classification.water": [[27, 4, 1, "", "ndwi_watermask"], [27, 4, 1, "", "threshold_watermask"]], "hypso.device": [[28, 3, 1, "", "EXPERIMENTAL_FEATURES"], [28, 1, 1, "", "Hypso"], [28, 4, 1, "", "set_or_create_attr"]], "hypso.device.Hypso": [[28, 2, 1, "", "create_geotiff"], [28, 2, 1, "", "create_l1b_nc_file"], [28, 2, 1, "", "delete_geotiff_dir"], [28, 2, 1, "", "find_existing_l2_cube"], [28, 2, 1, "", "find_geotiffs"], [28, 2, 1, "", "get_calibrated_and_corrected_cube"], [28, 2, 1, "", "get_calibration_coefficients_path"], [28, 2, 1, "", "get_projection_metadata"], [28, 2, 1, "", "get_spectra"], [28, 2, 1, "", "get_spectral_coefficients_path"], [28, 2, 1, "", "get_srf"], [28, 2, 1, "", "toa_reflectance_from_toa_radiance"]], "hypso.download": [[29, 4, 1, "", "download_nc_files"]], "hypso.georeference": [[30, 0, 0, "-", "coordinate_correction"], [38, 4, 1, "", "create_adcs_timestamps_files"], [31, 0, 0, "-", "create_adcs_timestamps_files"], [38, 4, 1, "", "generate_full_geotiff"], [38, 4, 1, "", "generate_rgb_geotiff"], [38, 4, 1, "", "geometry_computation"], [34, 0, 0, "-", "georef"], [37, 0, 0, "-", "georef_plots"], [39, 0, 0, "-", "interpolate_at_frame"], [40, 0, 0, "-", "reference"], [38, 4, 1, "", "start_coordinate_correction"]], "hypso.georeference.coordinate_correction": [[30, 4, 1, "", "coordinate_correction"], [30, 4, 1, "", "coordinate_correction_matrix"], [30, 4, 1, "", "start_coordinate_correction"]], "hypso.georeference.create_adcs_timestamps_files": [[31, 4, 1, "", "create_adcs_timestamps_files"]], "hypso.georeference.georef": [[34, 1, 1, "", "GoogleMapDownloader"], [34, 1, 1, "", "GoogleMapsLayers"], [34, 3, 1, "", "R_eq"], [34, 3, 1, "", "R_pl"], [34, 3, 1, "", "e_2"], [34, 4, 1, "", "ecef_to_lat_lon_alt"], [34, 4, 1, "", "eci_lon_to_ecef_lon"], [34, 4, 1, "", "eci_to_lat_lon_alt"], [34, 4, 1, "", "eci_to_lat_loneci_alt"], [34, 4, 1, "", "ellipsoid_line_intersection"], [34, 3, 1, "", "f"], [34, 4, 1, "", "gen_resample_grid"], [34, 4, 1, "", "gen_resample_grid_bbox_min"], [32, 0, 0, "-", "geometric"], [34, 4, 1, "id1", "get_greenwich_mean_sidereal_time_seconds"], [34, 4, 1, "id0", "get_julian_day_number"], [33, 0, 0, "-", "gmaps"], [34, 4, 1, "", "lat_lon_alt_to_ecef"], [34, 4, 1, "", "main"], [34, 4, 1, "", "mat_from_quat"], [34, 4, 1, "", "minimum_bounding_rectangle"], [34, 4, 1, "", "pixel_to_latlon"], [34, 4, 1, "", "pos_ecef_to_lat_lon_alt"], [34, 4, 1, "", "rotate_axis_angle"], [35, 0, 0, "-", "time"], [36, 0, 0, "-", "utils"]], "hypso.georeference.georef.GoogleMapDownloader": [[34, 2, 1, "", "generateImage"], [34, 2, 1, "", "latlon_to_tileXY"]], "hypso.georeference.georef.GoogleMapsLayers": [[34, 5, 1, "", "ALTERED_ROADMAP"], [34, 5, 1, "", "HYBRID"], [34, 5, 1, "", "ROADMAP"], [34, 5, 1, "", "SATELLITE"], [34, 5, 1, "", "TERRAIN"], [34, 5, 1, "", "TERRAIN_ONLY"]], "hypso.georeference.georef.geometric": [[32, 3, 1, "id4", "R_eq"], [32, 3, 1, "", "R_pl"], [32, 3, 1, "", "e_2"], [32, 4, 1, "", "ecef_to_lat_lon_alt"], [32, 4, 1, "", "eci_lon_to_ecef_lon"], [32, 4, 1, "", "eci_to_lat_lon_alt"], [32, 4, 1, "", "eci_to_lat_loneci_alt"], [32, 4, 1, "", "ellipsoid_line_intersection"], [32, 3, 1, "id5", "f"], [32, 4, 1, "", "lat_lon_alt_to_ecef"], [32, 4, 1, "", "mat_from_quat"], [32, 4, 1, "", "minimum_bounding_rectangle"], [32, 4, 1, "", "pos_ecef_to_lat_lon_alt"], [32, 4, 1, "", "rotate_axis_angle"]], "hypso.georeference.georef.gmaps": [[33, 1, 1, "", "GoogleMapDownloader"], [33, 1, 1, "", "GoogleMapsLayers"], [33, 4, 1, "", "main"], [33, 4, 1, "", "pixel_to_latlon"]], "hypso.georeference.georef.gmaps.GoogleMapDownloader": [[33, 2, 1, "", "generateImage"], [33, 2, 1, "", "latlon_to_tileXY"]], "hypso.georeference.georef.gmaps.GoogleMapsLayers": [[33, 5, 1, "", "ALTERED_ROADMAP"], [33, 5, 1, "", "HYBRID"], [33, 5, 1, "", "ROADMAP"], [33, 5, 1, "", "SATELLITE"], [33, 5, 1, "", "TERRAIN"], [33, 5, 1, "", "TERRAIN_ONLY"]], "hypso.georeference.georef.time": [[35, 4, 1, "", "get_greenwich_mean_sidereal_time_seconds"], [35, 4, 1, "", "get_julian_day_number"]], "hypso.georeference.georef.utils": [[36, 4, 1, "", "gen_resample_grid"], [36, 4, 1, "", "gen_resample_grid_bbox_min"]], "hypso.georeference.georef_plots": [[37, 3, 1, "id0", "R_eq"], [37, 3, 1, "", "R_pl"], [37, 4, 1, "", "add_grid"], [37, 4, 1, "", "compute_elevation_angle"], [37, 4, 1, "", "compute_local_angles"], [37, 4, 1, "", "compute_local_angles_2"], [37, 4, 1, "", "compute_off_nadir_angle"], [37, 3, 1, "", "e_2"], [37, 3, 1, "id1", "f"], [37, 4, 1, "", "geometry_computation"], [37, 4, 1, "", "get_wkt"], [37, 4, 1, "", "get_wkt_points"], [37, 3, 1, "", "hypso_height_sensor"], [37, 4, 1, "", "numpy_norm"], [37, 4, 1, "", "pixel_index_to_angle"]], "hypso.georeference.interpolate_at_frame": [[39, 4, 1, "", "interpolate_at_frame"]], "hypso.georeference.reference": [[40, 3, 1, "", "DEBUG"], [40, 3, 1, "", "EXPORT_SINGLE_BANDS"], [40, 3, 1, "", "b_band_index"], [40, 4, 1, "", "export_single_band_geotiff"], [40, 3, 1, "", "g_band_index"], [40, 4, 1, "", "generate_full_geotiff"], [40, 4, 1, "", "generate_geotiff"], [40, 4, 1, "", "generate_rgb_geotiff"], [40, 4, 1, "", "interpolate_geotiff"], [40, 3, 1, "", "r_band_index"]], "hypso.plot": [[42, 4, 1, "", "get_rgb"], [43, 0, 0, "-", "map"], [42, 4, 1, "", "plot_array_overlay"], [42, 4, 1, "", "point_rgb_map"], [42, 4, 1, "", "show_rgb_map"], [42, 4, 1, "", "write_rgb_to_png"]], "hypso.plot.map": [[43, 3, 1, "", "PLOTZOOM"], [43, 4, 1, "", "auto_adjust_img"], [43, 4, 1, "", "axis_extent"], [43, 4, 1, "", "check_projection_geotiff"], [43, 4, 1, "", "get_cartopy_axis"], [43, 4, 1, "", "get_rgb"], [43, 4, 1, "", "image_extent"], [43, 4, 1, "", "plot_array_overlay"], [43, 4, 1, "", "point_rgb_map"], [43, 4, 1, "", "show_rgb_map"], [43, 4, 1, "", "tick_log_formatter"], [43, 4, 1, "", "write_rgb_to_png"]], "hypso.reading": [[45, 0, 0, "-", "load"], [44, 4, 1, "", "load_nc"]], "hypso.reading.load": [[45, 3, 1, "", "EXPERIMENTAL_FEATURES"], [45, 4, 1, "", "get_lat_lon_2d"], [45, 4, 1, "", "get_local_angles"], [45, 4, 1, "", "get_metainfo_from_nc_file"], [45, 4, 1, "", "get_raw_cube_from_nc_file"], [45, 4, 1, "", "load_nc"]], "hypso.utils": [[46, 4, 1, "", "HSI2RGB"], [46, 1, 1, "", "MyProgressBar"], [46, 4, 1, "", "compare_netcdf_files"], [46, 4, 1, "", "find_all_files"], [46, 4, 1, "", "find_dir"], [46, 4, 1, "", "find_file"], [46, 4, 1, "", "is_integer_num"], [46, 4, 1, "", "print_nc"], [47, 0, 0, "-", "utils"]], "hypso.utils.MyProgressBar": [[46, 2, 1, "", "__call__"]], "hypso.utils.utils": [[47, 4, 1, "", "HSI2RGB"], [47, 1, 1, "", "MyProgressBar"], [47, 4, 1, "", "compare_netcdf_files"], [47, 4, 1, "", "find_all_files"], [47, 4, 1, "", "find_closest_water_lat_lon_match"], [47, 4, 1, "", "find_dir"], [47, 4, 1, "", "find_file"], [47, 4, 1, "", "flatten_dict"], [47, 4, 1, "", "haversine"], [47, 4, 1, "", "is_integer_num"], [47, 4, 1, "", "list_array_1d_to_string"], [47, 4, 1, "", "navigate_recursive_nc"], [47, 4, 1, "", "nested_dict_to_df"], [47, 4, 1, "", "print_nc"], [47, 4, 1, "", "pseudo_convolution"], [47, 4, 1, "", "recursive_print_nc"]], "hypso.utils.utils.MyProgressBar": [[47, 2, 1, "", "__call__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:function", "5": "py:attribute", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "property", "Python property"]}, "titleterms": {"document": [1, 48, 49], "refer": [1, 40, 48], "hypso": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49], "atmospher": [11, 12, 13, 14], "atmospheric_correction_6sv1": 11, "modul": [11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 43, 45, 47], "content": [11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49], "function": [11, 12, 13, 14, 15, 16, 18, 19, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "atmospheric_correction_acolit": 12, "base": 13, "submodul": [14, 16, 17, 25, 26, 34, 38, 41, 42, 44, 46], "packag": [14, 16, 25, 26, 34, 38, 41, 42, 44, 46, 49], "calibr": [15, 16], "correct": 15, "classif": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "waterdetect": [17, 18, 19, 20, 21, 22, 23, 24, 25], "subpackag": [17, 26, 38, 41], "runwaterdetect": 18, "common": 19, "class": [19, 21, 22, 23, 24, 25, 28, 33, 34, 41, 46, 47], "paramet": [19, 25], "info": [19, 25], "external_mask": 20, "glint": 21, "imag": 22, "inputoutput": 23, "attribut": [25, 28, 32, 34, 37, 40, 41, 43, 45], "water": 27, "devic": 28, "download": 29, "georefer": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "coordinate_correct": 30, "create_adcs_timestamps_fil": 31, "georef": [32, 33, 34, 35, 36], "geometr": 32, "gmap": 33, "time": 35, "util": [36, 46, 47], "georef_plot": 37, "interpolate_at_fram": 39, "plot": [42, 43], "map": 43, "read": [44, 45], "load": 45, "welcom": 49, "": 49, "indic": 49, "tabl": 49}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Welcome to Hypso Package\u2019s documentation!": [[49, "welcome-to-hypso-package-s-documentation"]], "Contents:": [[49, null]], "Indices and tables": [[49, "indices-and-tables"]], "Documentation Reference": [[1, "documentation-reference"], [48, "documentation-reference"]], "hypso.atmospheric.atmospheric_correction_6sv1": [[11, "module-hypso.atmospheric.atmospheric_correction_6sv1"]], "Module Contents": [[11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [43, "module-contents"], [45, "module-contents"], [47, "module-contents"]], "Functions": [[11, "functions"], [12, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [18, "functions"], [19, "functions"], [20, "functions"], [25, "functions"], [26, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [33, "functions"], [34, "functions"], [35, "functions"], [36, "functions"], [37, "functions"], [38, "functions"], [39, "functions"], [40, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [46, "functions"], [47, "functions"]], "hypso.atmospheric.atmospheric_correction_acolite": [[12, "module-hypso.atmospheric.atmospheric_correction_acolite"]], "hypso.atmospheric.base": [[13, "module-hypso.atmospheric.base"]], "hypso.atmospheric": [[14, "module-hypso.atmospheric"]], "Submodules": [[14, "submodules"], [16, "submodules"], [17, "submodules"], [25, "submodules"], [26, "submodules"], [34, "submodules"], [38, "submodules"], [41, "submodules"], [42, "submodules"], [44, "submodules"], [46, "submodules"]], "Package Contents": [[14, "package-contents"], [16, "package-contents"], [25, "package-contents"], [26, "package-contents"], [34, "package-contents"], [38, "package-contents"], [41, "package-contents"], [42, "package-contents"], [44, "package-contents"], [46, "package-contents"]], "hypso.calibration.correction": [[15, "module-hypso.calibration.correction"]], "hypso.calibration": [[16, "module-hypso.calibration"]], "hypso.classification.WaterDetect": [[17, "module-hypso.classification.WaterDetect"]], "Subpackages": [[17, "subpackages"], [26, "subpackages"], [38, "subpackages"], [41, "subpackages"]], "hypso.classification.WaterDetect.runWaterDetect": [[18, "module-hypso.classification.WaterDetect.runWaterDetect"]], "hypso.classification.WaterDetect.waterdetect.Common": [[19, "module-hypso.classification.WaterDetect.waterdetect.Common"]], "Classes": [[19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [28, "classes"], [33, "classes"], [34, "classes"], [41, "classes"], [46, "classes"], [47, "classes"]], "Parameters": [[19, "parameters"], [19, "id1"], [25, "parameters"], [25, "id1"]], "Info": [[19, "info"], [25, "info"]], "hypso.classification.WaterDetect.waterdetect.External_mask": [[20, "module-hypso.classification.WaterDetect.waterdetect.External_mask"]], "hypso.classification.WaterDetect.waterdetect.Glint": [[21, "module-hypso.classification.WaterDetect.waterdetect.Glint"]], "hypso.classification.WaterDetect.waterdetect.Image": [[22, "module-hypso.classification.WaterDetect.waterdetect.Image"]], "hypso.classification.WaterDetect.waterdetect.InputOutput": [[23, "module-hypso.classification.WaterDetect.waterdetect.InputOutput"]], "hypso.classification.WaterDetect.waterdetect.WaterDetect": [[24, "module-hypso.classification.WaterDetect.waterdetect.WaterDetect"]], "hypso.classification.WaterDetect.waterdetect": [[25, "module-hypso.classification.WaterDetect.waterdetect"]], "Attributes": [[25, "attributes"], [28, "attributes"], [32, "attributes"], [34, "attributes"], [37, "attributes"], [40, "attributes"], [41, "attributes"], [43, "attributes"], [45, "attributes"]], "hypso.classification": [[26, "module-hypso.classification"]], "hypso.classification.water": [[27, "module-hypso.classification.water"]], "hypso.device": [[28, "module-hypso.device"]], "hypso.download": [[29, "module-hypso.download"]], "hypso.georeference.coordinate_correction": [[30, "module-hypso.georeference.coordinate_correction"]], "hypso.georeference.create_adcs_timestamps_files": [[31, "module-hypso.georeference.create_adcs_timestamps_files"]], "hypso.georeference.georef.geometric": [[32, "module-hypso.georeference.georef.geometric"]], "hypso.georeference.georef.gmaps": [[33, "module-hypso.georeference.georef.gmaps"]], "hypso.georeference.georef": [[34, "module-hypso.georeference.georef"]], "hypso.georeference.georef.time": [[35, "module-hypso.georeference.georef.time"]], "hypso.georeference.georef.utils": [[36, "module-hypso.georeference.georef.utils"]], "hypso.georeference.georef_plots": [[37, "module-hypso.georeference.georef_plots"]], "hypso.georeference": [[38, "module-hypso.georeference"]], "hypso.georeference.interpolate_at_frame": [[39, "module-hypso.georeference.interpolate_at_frame"]], "hypso.georeference.reference": [[40, "module-hypso.georeference.reference"]], "hypso": [[41, "module-hypso"]], "hypso.plot": [[42, "module-hypso.plot"]], "hypso.plot.map": [[43, "module-hypso.plot.map"]], "hypso.reading": [[44, "module-hypso.reading"]], "hypso.reading.load": [[45, "module-hypso.reading.load"]], "hypso.utils": [[46, "module-hypso.utils"]], "hypso.utils.utils": [[47, "module-hypso.utils.utils"]]}, "indexentries": {"atmosphericcorrection() (in module hypso.atmospheric.atmospheric_correction_6sv1)": [[11, "hypso.atmospheric.atmospheric_correction_6sv1.AtmosphericCorrection"]], "basicparameters() (in module hypso.atmospheric.atmospheric_correction_6sv1)": [[11, "hypso.atmospheric.atmospheric_correction_6sv1.BasicParameters"]], "clip_srf() (in module hypso.atmospheric.atmospheric_correction_6sv1)": [[11, "hypso.atmospheric.atmospheric_correction_6sv1.clip_srf"]], "get_corrected_radiance() (in module hypso.atmospheric.atmospheric_correction_6sv1)": [[11, "hypso.atmospheric.atmospheric_correction_6sv1.get_corrected_radiance"]], "get_surface_reflectance() (in module hypso.atmospheric.atmospheric_correction_6sv1)": [[11, "hypso.atmospheric.atmospheric_correction_6sv1.get_surface_reflectance"]], "hypso.atmospheric.atmospheric_correction_6sv1": [[11, "module-hypso.atmospheric.atmospheric_correction_6sv1"]], "module": [[11, "module-hypso.atmospheric.atmospheric_correction_6sv1"], [12, "module-hypso.atmospheric.atmospheric_correction_acolite"], [13, "module-hypso.atmospheric.base"], [14, "module-hypso.atmospheric"], [15, "module-hypso.calibration.correction"], [16, "module-hypso.calibration"], [17, "module-hypso.classification.WaterDetect"], [18, "module-hypso.classification.WaterDetect.runWaterDetect"], [19, "module-hypso.classification.WaterDetect.waterdetect.Common"], [20, "module-hypso.classification.WaterDetect.waterdetect.External_mask"], [21, "module-hypso.classification.WaterDetect.waterdetect.Glint"], [22, "module-hypso.classification.WaterDetect.waterdetect.Image"], [23, "module-hypso.classification.WaterDetect.waterdetect.InputOutput"], [24, "module-hypso.classification.WaterDetect.waterdetect.WaterDetect"], [25, "module-hypso.classification.WaterDetect.waterdetect"], [26, "module-hypso.classification"], [27, "module-hypso.classification.water"], [28, "module-hypso.device"], [29, "module-hypso.download"], [30, "module-hypso.georeference.coordinate_correction"], [31, "module-hypso.georeference.create_adcs_timestamps_files"], [32, "module-hypso.georeference.georef.geometric"], [33, "module-hypso.georeference.georef.gmaps"], [34, "module-hypso.georeference.georef"], [35, "module-hypso.georeference.georef.time"], [36, "module-hypso.georeference.georef.utils"], [37, "module-hypso.georeference.georef_plots"], [38, "module-hypso.georeference"], [39, "module-hypso.georeference.interpolate_at_frame"], [40, "module-hypso.georeference.reference"], [41, "module-hypso"], [42, "module-hypso.plot"], [43, "module-hypso.plot.map"], [44, "module-hypso.reading"], [45, "module-hypso.reading.load"], [46, "module-hypso.utils"], [47, "module-hypso.utils.utils"]], "run_py6s() (in module hypso.atmospheric.atmospheric_correction_6sv1)": [[11, "hypso.atmospheric.atmospheric_correction_6sv1.run_py6s"]], "get_acolite_repo() (in module hypso.atmospheric.atmospheric_correction_acolite)": [[12, "hypso.atmospheric.atmospheric_correction_acolite.get_acolite_repo"]], "hypso.atmospheric.atmospheric_correction_acolite": [[12, "module-hypso.atmospheric.atmospheric_correction_acolite"]], "reset_config_file() (in module hypso.atmospheric.atmospheric_correction_acolite)": [[12, "hypso.atmospheric.atmospheric_correction_acolite.reset_config_file"]], "run_acolite() (in module hypso.atmospheric.atmospheric_correction_acolite)": [[12, "hypso.atmospheric.atmospheric_correction_acolite.run_acolite"]], "meandem() (in module hypso.atmospheric.base)": [[13, "hypso.atmospheric.base.MeanDEM"]], "hypso.atmospheric.base": [[13, "module-hypso.atmospheric.base"]], "get_acolite_repo() (in module hypso.atmospheric)": [[14, "hypso.atmospheric.get_acolite_repo"]], "hypso.atmospheric": [[14, "module-hypso.atmospheric"]], "run_acolite() (in module hypso.atmospheric)": [[14, "hypso.atmospheric.run_acolite"]], "run_py6s() (in module hypso.atmospheric)": [[14, "hypso.atmospheric.run_py6s"]], "apply_radiometric_calibration() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.apply_radiometric_calibration"]], "calibrate_cube() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.calibrate_cube"]], "crop_and_bin_matrix() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.crop_and_bin_matrix"]], "destriping_correct_cube() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.destriping_correct_cube"]], "get_coefficients_from_dict() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.get_coefficients_from_dict"]], "get_coefficients_from_file() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.get_coefficients_from_file"]], "hypso.calibration.correction": [[15, "module-hypso.calibration.correction"]], "smile_correct_cube() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.smile_correct_cube"]], "smile_correction_one_frame() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.smile_correction_one_frame"]], "smile_correction_one_row() (in module hypso.calibration.correction)": [[15, "hypso.calibration.correction.smile_correction_one_row"]], "calibrate_cube() (in module hypso.calibration)": [[16, "hypso.calibration.calibrate_cube"]], "crop_and_bin_matrix() (in module hypso.calibration)": [[16, "hypso.calibration.crop_and_bin_matrix"]], "destriping_correct_cube() (in module hypso.calibration)": [[16, "hypso.calibration.destriping_correct_cube"]], "get_coefficients_from_dict() (in module hypso.calibration)": [[16, "hypso.calibration.get_coefficients_from_dict"]], "get_coefficients_from_file() (in module hypso.calibration)": [[16, "hypso.calibration.get_coefficients_from_file"]], "hypso.calibration": [[16, "module-hypso.calibration"]], "smile_correct_cube() (in module hypso.calibration)": [[16, "hypso.calibration.smile_correct_cube"]], "hypso.classification.waterdetect": [[17, "module-hypso.classification.WaterDetect"]], "debug() (in module hypso.classification.waterdetect.runwaterdetect)": [[18, "hypso.classification.WaterDetect.runWaterDetect.debug"]], "debug_path() (in module hypso.classification.waterdetect.runwaterdetect)": [[18, "hypso.classification.WaterDetect.runWaterDetect.debug_path"]], "hypso.classification.waterdetect.runwaterdetect": [[18, "module-hypso.classification.WaterDetect.runWaterDetect"]], "main() (in module hypso.classification.waterdetect.runwaterdetect)": [[18, "hypso.classification.WaterDetect.runWaterDetect.main"]], "process_ext_masks() (in module hypso.classification.waterdetect.runwaterdetect)": [[18, "hypso.classification.WaterDetect.runWaterDetect.process_ext_masks"]], "dwbaseconfig (class in hypso.classification.waterdetect.waterdetect.common)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWBaseConfig"]], "dwconfig (class in hypso.classification.waterdetect.waterdetect.common)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig"]], "dwutils (class in hypso.classification.waterdetect.waterdetect.common)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils"]], "_config_file (hypso.classification.waterdetect.waterdetect.common.dwconfig attribute)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig._config_file"]], "_defaults (hypso.classification.waterdetect.waterdetect.common.dwbaseconfig attribute)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWBaseConfig._defaults"]], "_defaults (hypso.classification.waterdetect.waterdetect.common.dwconfig attribute)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig._defaults"]], "_units (hypso.classification.waterdetect.waterdetect.common.dwbaseconfig attribute)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWBaseConfig._units"]], "apply_mask() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.apply_mask"]], "array2multiband() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.array2multiband"]], "array2raster() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.array2raster"]], "array2rgb_raster() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.array2rgb_raster"]], "average_results (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.average_results"]], "bitwise_and() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.bitwise_and"]], "bitwise_or() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.bitwise_or"]], "calc_glint (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.calc_glint"]], "calc_mbwi() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.calc_mbwi"]], "calc_normalized_difference() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.calc_normalized_difference"]], "check_path() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.check_path"]], "classifier (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.classifier"]], "clip_band (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.clip_band"]], "clip_inf_value (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.clip_inf_value"]], "clip_sup_value (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.clip_sup_value"]], "clustering_bands (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.clustering_bands"]], "clustering_method (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.clustering_method"]], "create_bands_dict() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.create_bands_dict"]], "create_colorbar_pdf() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.create_colorbar_pdf"]], "create_composite (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.create_composite"]], "create_composite() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.create_composite"]], "create_glint_pdf() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.create_glint_pdf"]], "detect_water_cluster (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.detect_water_cluster"]], "external_mask (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.external_mask"]], "extract_angles_from_xml() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.extract_angles_from_xml"]], "find_file_glob() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.find_file_glob"]], "flatten() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.flatten"]], "get_directories() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.get_directories"]], "get_masks_list() (hypso.classification.waterdetect.waterdetect.common.dwconfig method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.get_masks_list"]], "get_option() (hypso.classification.waterdetect.waterdetect.common.dwbaseconfig method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWBaseConfig.get_option"]], "get_train_test_data() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.get_train_test_data"]], "glint_mode (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.glint_mode"]], "graphs_bands (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.graphs_bands"]], "gray2color_ramp() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.gray2color_ramp"]], "hypso.classification.waterdetect.waterdetect.common": [[19, "module-hypso.classification.WaterDetect.waterdetect.Common"]], "indices (hypso.classification.waterdetect.waterdetect.common.dwutils attribute)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.indices"]], "linkage (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.linkage"]], "listify() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.listify"]], "load_config_file() (hypso.classification.waterdetect.waterdetect.common.dwbaseconfig method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWBaseConfig.load_config_file"]], "mask_invalid_value (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.mask_invalid_value"]], "mask_name (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.mask_name"]], "mask_valid_value (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.mask_valid_value"]], "max_clusters (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.max_clusters"]], "max_train_size (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.max_train_size"]], "maximum_invalid (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.maximum_invalid"]], "min_clusters (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.min_clusters"]], "min_glint_multiplier (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.min_glint_multiplier"]], "min_positive_pixels (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.min_positive_pixels"]], "min_train_size (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.min_train_size"]], "parse_maja_name() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.parse_maja_name"]], "parse_planetary_name() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.parse_planetary_name"]], "parse_s2cor_name() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.parse_s2cor_name"]], "parse_sat_name() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.parse_sat_name"]], "pdf_reports (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.pdf_reports"]], "pdf_resolution (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.pdf_resolution"]], "pekel_accuracy (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.pekel_accuracy"]], "pekel_water (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.pekel_water"]], "plot_clustered_data() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.plot_clustered_data"]], "plot_graphs (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.plot_graphs"]], "plot_graphs() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.plot_graphs"]], "plot_ts (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.plot_ts"]], "read_gdal_ds() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.read_gdal_ds"]], "reference_band (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.reference_band"]], "regularization (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.regularization"]], "remove_negatives() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.remove_negatives"]], "return_defaults() (hypso.classification.waterdetect.waterdetect.common.dwbaseconfig method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWBaseConfig.return_defaults"]], "rgb_burn_in() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.rgb_burn_in"]], "save_indices (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.save_indices"]], "score_index (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.score_index"]], "test_ini() (in module hypso.classification.waterdetect.waterdetect.common)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.test_ini"]], "texture_stretching (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.texture_stretching"]], "tif_2_pdf() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.tif_2_pdf"]], "train_size (hypso.classification.waterdetect.waterdetect.common.dwconfig property)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWConfig.train_size"]], "write_pdf() (hypso.classification.waterdetect.waterdetect.common.dwutils static method)": [[19, "hypso.classification.WaterDetect.waterdetect.Common.DWutils.write_pdf"]], "hypso.classification.waterdetect.waterdetect.external_mask": [[20, "module-hypso.classification.WaterDetect.waterdetect.External_mask"]], "prepare_external_masks() (in module hypso.classification.waterdetect.waterdetect.external_mask)": [[20, "hypso.classification.WaterDetect.waterdetect.External_mask.prepare_external_masks"]], "process_mask() (in module hypso.classification.waterdetect.waterdetect.external_mask)": [[20, "hypso.classification.WaterDetect.waterdetect.External_mask.process_mask"]], "search_mask() (in module hypso.classification.waterdetect.waterdetect.external_mask)": [[20, "hypso.classification.WaterDetect.waterdetect.External_mask.search_mask"]], "set_mask_flags() (in module hypso.classification.waterdetect.waterdetect.external_mask)": [[20, "hypso.classification.WaterDetect.waterdetect.External_mask.set_mask_flags"]], "dwglintprocessor (class in hypso.classification.waterdetect.waterdetect.glint)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor"]], "__repr__() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.__repr__"]], "create() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor class method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.create"]], "create_annotated_heatmap() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor static method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.create_annotated_heatmap"]], "create_glint_array() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor static method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.create_glint_array"]], "create_glint_heatmap() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor static method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.create_glint_heatmap"]], "create_multiplication_coefs() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.create_multiplication_coefs"]], "get_grid_values_from_xml() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor static method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.get_grid_values_from_xml"]], "glint_adjusted_threshold() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.glint_adjusted_threshold"]], "hypso.classification.waterdetect.waterdetect.glint": [[21, "module-hypso.classification.WaterDetect.waterdetect.Glint"]], "nn_interpolate() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor static method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.nn_interpolate"]], "save_heatmap() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.save_heatmap"]], "show_multiplication_coefs() (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor method)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.show_multiplication_coefs"]], "supported_products (hypso.classification.waterdetect.waterdetect.glint.dwglintprocessor attribute)": [[21, "hypso.classification.WaterDetect.waterdetect.Glint.DWGlintProcessor.supported_products"]], "dwimageclustering (class in hypso.classification.waterdetect.waterdetect.image)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering"]], "apply_canny_treshold() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.apply_canny_treshold"]], "apply_cluster() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.apply_cluster"]], "apply_clustering() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.apply_clustering"]], "apply_mlp() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering static method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.apply_mlp"]], "apply_naive_bayes() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering static method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.apply_naive_bayes"]], "apply_otsu_treshold() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.apply_otsu_treshold"]], "apply_svm() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering static method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.apply_svm"]], "bands_to_columns() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.bands_to_columns"]], "calc_clusters_params() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.calc_clusters_params"]], "check_necessary_bands() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.check_necessary_bands"]], "create_matrice_cluster() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.create_matrice_cluster"]], "create_product_name() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.create_product_name"]], "detect_cluster() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.detect_cluster"]], "find_best_k() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.find_best_k"]], "get_cluster_param() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.get_cluster_param"]], "get_necessary_bands() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.get_necessary_bands"]], "hypso.classification.waterdetect.waterdetect.image": [[22, "module-hypso.classification.WaterDetect.waterdetect.Image"]], "identify_water_cluster() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.identify_water_cluster"]], "index_of_key() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.index_of_key"]], "product_name (hypso.classification.waterdetect.waterdetect.image.dwimageclustering property)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.product_name"]], "run_detect_water() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.run_detect_water"]], "separate_high_low_mndwi() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.separate_high_low_mndwi"]], "split_data_by_bands() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.split_data_by_bands"]], "supervised_classification() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.supervised_classification"]], "verify_cluster() (hypso.classification.waterdetect.waterdetect.image.dwimageclustering method)": [[22, "hypso.classification.WaterDetect.waterdetect.Image.DWImageClustering.verify_cluster"]], "dwlandsatmaskprocessor (class in hypso.classification.waterdetect.waterdetect.inputoutput)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLandsatMaskProcessor"]], "dwloader (class in hypso.classification.waterdetect.waterdetect.inputoutput)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader"]], "dws2cormaskprocessor (class in hypso.classification.waterdetect.waterdetect.inputoutput)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWS2CORMaskProcessor"]], "dwsaver (class in hypso.classification.waterdetect.waterdetect.inputoutput)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver"]], "dwtheiamaskprocessor (class in hypso.classification.waterdetect.waterdetect.inputoutput)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWTheiaMaskProcessor"]], "landsatmaskdict (hypso.classification.waterdetect.waterdetect.inputoutput.dwlandsatmaskprocessor attribute)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLandsatMaskProcessor.LandsatMaskDict"]], "sen2cormasklist (hypso.classification.waterdetect.waterdetect.inputoutput.dws2cormaskprocessor attribute)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWS2CORMaskProcessor.Sen2CorMaskList"]], "theiaclmdict (hypso.classification.waterdetect.waterdetect.inputoutput.dwtheiamaskprocessor attribute)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWTheiaMaskProcessor.TheiaCLMDict"]], "theiamg2dict (hypso.classification.waterdetect.waterdetect.inputoutput.dwtheiamaskprocessor attribute)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWTheiaMaskProcessor.TheiaMG2Dict"]], "theiamaskdict (hypso.classification.waterdetect.waterdetect.inputoutput.dwtheiamaskprocessor attribute)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWTheiaMaskProcessor.TheiaMaskDict"]], "__iter__() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.__iter__"]], "__len__() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.__len__"]], "__next__() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.__next__"]], "area_name (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.area_name"]], "area_name (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.area_name"]], "band_ids (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader attribute)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.band_ids"]], "bands_path (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.bands_path"]], "clip_bands() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.clip_bands"]], "create_base_name() (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver static method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.create_base_name"]], "create_output_folder() (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver static method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.create_output_folder"]], "current_image_folder (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.current_image_folder"]], "current_image_name (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.current_image_name"]], "geo_transform (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.geo_transform"]], "get_bands_files() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.get_bands_files"]], "get_combined_masks() (hypso.classification.waterdetect.waterdetect.inputoutput.dwlandsatmaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLandsatMaskProcessor.get_combined_masks"]], "get_combined_masks() (hypso.classification.waterdetect.waterdetect.inputoutput.dws2cormaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWS2CORMaskProcessor.get_combined_masks"]], "get_combined_masks() (hypso.classification.waterdetect.waterdetect.inputoutput.dwtheiamaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWTheiaMaskProcessor.get_combined_masks"]], "get_offset() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.get_offset"]], "glint_name (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.glint_name"]], "granule_metadata (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.granule_metadata"]], "hypso.classification.waterdetect.waterdetect.inputoutput": [[23, "module-hypso.classification.WaterDetect.waterdetect.InputOutput"]], "load_masks() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.load_masks"]], "load_raster_bands() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.load_raster_bands"]], "metadata (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.metadata"]], "open_current_image() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.open_current_image"]], "open_gdal_image() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader static method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.open_gdal_image"]], "open_gdal_masks() (hypso.classification.waterdetect.waterdetect.inputoutput.dwlandsatmaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLandsatMaskProcessor.open_gdal_masks"]], "open_gdal_masks() (hypso.classification.waterdetect.waterdetect.inputoutput.dws2cormaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWS2CORMaskProcessor.open_gdal_masks"]], "open_gdal_masks() (hypso.classification.waterdetect.waterdetect.inputoutput.dwtheiamaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWTheiaMaskProcessor.open_gdal_masks"]], "open_mask() (hypso.classification.waterdetect.waterdetect.inputoutput.dwlandsatmaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLandsatMaskProcessor.open_mask"]], "open_mask() (hypso.classification.waterdetect.waterdetect.inputoutput.dws2cormaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWS2CORMaskProcessor.open_mask"]], "open_masks() (hypso.classification.waterdetect.waterdetect.inputoutput.dwtheiamaskprocessor method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWTheiaMaskProcessor.open_masks"]], "product_dict (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.product_dict"]], "projection (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.projection"]], "satellite_dict (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader attribute)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.satellite_Dict"]], "save_array() (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.save_array"]], "save_multiband() (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.save_multiband"]], "save_rgb_array() (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.save_rgb_array"]], "set_output_folder() (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.set_output_folder"]], "temp_dir (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.temp_dir"]], "update_geo_transform() (hypso.classification.waterdetect.waterdetect.inputoutput.dwsaver method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWSaver.update_geo_transform"]], "update_mask() (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader method)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.update_mask"]], "x_size (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.x_size"]], "y_size (hypso.classification.waterdetect.waterdetect.inputoutput.dwloader property)": [[23, "hypso.classification.WaterDetect.waterdetect.InputOutput.DWLoader.y_size"]], "dwwaterdetect (class in hypso.classification.waterdetect.waterdetect.waterdetect)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect"]], "__repr__() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.__repr__"]], "_detect_water() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect._detect_water"]], "calc_awei() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.calc_awei"]], "calc_indexes() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.calc_indexes"]], "calc_m_nd_index() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.calc_m_nd_index"]], "calc_mbwi() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.calc_mbwi"]], "calc_nd_index() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.calc_nd_index"]], "cluster_matrix (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect property)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.cluster_matrix"]], "create_colorbar_pdf() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.create_colorbar_pdf"]], "create_rgb_burn_in_pdf() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.create_rgb_burn_in_pdf"]], "create_water_mask() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.create_water_mask"]], "hypso.classification.waterdetect.waterdetect.waterdetect": [[24, "module-hypso.classification.WaterDetect.waterdetect.WaterDetect"]], "necessary_bands() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.necessary_bands"]], "run_water_detect() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect class method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.run_water_detect"]], "save_graphs() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.save_graphs"]], "save_report() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect static method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.save_report"]], "test_pekel() (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect method)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.test_pekel"]], "water_mask (hypso.classification.waterdetect.waterdetect.waterdetect.dwwaterdetect property)": [[24, "hypso.classification.WaterDetect.waterdetect.WaterDetect.DWWaterDetect.water_mask"]], "dwconfig (class in hypso.classification.waterdetect.waterdetect)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig"]], "dwimageclustering (class in hypso.classification.waterdetect.waterdetect)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering"]], "dwproducts (class in hypso.classification.waterdetect.waterdetect)": [[25, "hypso.classification.WaterDetect.waterdetect.DWProducts"]], "dwwaterdetect (class in hypso.classification.waterdetect.waterdetect)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect"]], "dwutils (class in hypso.classification.waterdetect.waterdetect)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils"]], "landsat8_usgs (hypso.classification.waterdetect.waterdetect.dwproducts attribute)": [[25, "hypso.classification.WaterDetect.waterdetect.DWProducts.Landsat8_USGS"]], "sentinel2_esa (hypso.classification.waterdetect.waterdetect.dwproducts attribute)": [[25, "hypso.classification.WaterDetect.waterdetect.DWProducts.Sentinel2_ESA"]], "sentinel2_l1c (hypso.classification.waterdetect.waterdetect.dwproducts attribute)": [[25, "hypso.classification.WaterDetect.waterdetect.DWProducts.Sentinel2_L1C"]], "sentinel2_theia (hypso.classification.waterdetect.waterdetect.dwproducts attribute)": [[25, "hypso.classification.WaterDetect.waterdetect.DWProducts.Sentinel2_THEIA"]], "__repr__() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.__repr__"]], "__version__ (in module hypso.classification.waterdetect.waterdetect)": [[25, "hypso.classification.WaterDetect.waterdetect.__version__"]], "_config_file (hypso.classification.waterdetect.waterdetect.dwconfig attribute)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig._config_file"]], "_defaults (hypso.classification.waterdetect.waterdetect.dwconfig attribute)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig._defaults"]], "_detect_water() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect._detect_water"]], "apply_canny_treshold() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.apply_canny_treshold"]], "apply_cluster() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.apply_cluster"]], "apply_clustering() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.apply_clustering"]], "apply_mask() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.apply_mask"]], "apply_mlp() (hypso.classification.waterdetect.waterdetect.dwimageclustering static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.apply_mlp"]], "apply_naive_bayes() (hypso.classification.waterdetect.waterdetect.dwimageclustering static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.apply_naive_bayes"]], "apply_otsu_treshold() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.apply_otsu_treshold"]], "apply_svm() (hypso.classification.waterdetect.waterdetect.dwimageclustering static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.apply_svm"]], "array2multiband() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.array2multiband"]], "array2raster() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.array2raster"]], "array2rgb_raster() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.array2rgb_raster"]], "average_results (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.average_results"]], "bands_to_columns() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.bands_to_columns"]], "bitwise_and() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.bitwise_and"]], "bitwise_or() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.bitwise_or"]], "calc_awei() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.calc_awei"]], "calc_clusters_params() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.calc_clusters_params"]], "calc_glint (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.calc_glint"]], "calc_indexes() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.calc_indexes"]], "calc_m_nd_index() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.calc_m_nd_index"]], "calc_mbwi() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.calc_mbwi"]], "calc_mbwi() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.calc_mbwi"]], "calc_nd_index() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.calc_nd_index"]], "calc_normalized_difference() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.calc_normalized_difference"]], "check_necessary_bands() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.check_necessary_bands"]], "check_path() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.check_path"]], "classifier (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.classifier"]], "clip_band (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.clip_band"]], "clip_inf_value (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.clip_inf_value"]], "clip_sup_value (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.clip_sup_value"]], "cluster_matrix (hypso.classification.waterdetect.waterdetect.dwwaterdetect property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.cluster_matrix"]], "clustering_bands (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.clustering_bands"]], "clustering_method (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.clustering_method"]], "create_bands_dict() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.create_bands_dict"]], "create_colorbar_pdf() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.create_colorbar_pdf"]], "create_colorbar_pdf() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.create_colorbar_pdf"]], "create_composite (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.create_composite"]], "create_composite() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.create_composite"]], "create_glint_pdf() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.create_glint_pdf"]], "create_matrice_cluster() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.create_matrice_cluster"]], "create_product_name() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.create_product_name"]], "create_rgb_burn_in_pdf() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.create_rgb_burn_in_pdf"]], "create_water_mask() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.create_water_mask"]], "detect_cluster() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.detect_cluster"]], "detect_water_cluster (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.detect_water_cluster"]], "external_mask (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.external_mask"]], "extract_angles_from_xml() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.extract_angles_from_xml"]], "find_best_k() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.find_best_k"]], "find_file_glob() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.find_file_glob"]], "flatten() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.flatten"]], "gdal (in module hypso.classification.waterdetect.waterdetect)": [[25, "hypso.classification.WaterDetect.waterdetect.gdal"]], "get_cluster_param() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.get_cluster_param"]], "get_directories() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.get_directories"]], "get_masks_list() (hypso.classification.waterdetect.waterdetect.dwconfig method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.get_masks_list"]], "get_necessary_bands() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.get_necessary_bands"]], "get_train_test_data() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.get_train_test_data"]], "glint_mode (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.glint_mode"]], "graphs_bands (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.graphs_bands"]], "gray2color_ramp() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.gray2color_ramp"]], "hypso.classification.waterdetect.waterdetect": [[25, "module-hypso.classification.WaterDetect.waterdetect"]], "identify_water_cluster() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.identify_water_cluster"]], "index_of_key() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.index_of_key"]], "indices (hypso.classification.waterdetect.waterdetect.dwutils attribute)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.indices"]], "linkage (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.linkage"]], "listify() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.listify"]], "mask_invalid_value (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.mask_invalid_value"]], "mask_name (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.mask_name"]], "mask_valid_value (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.mask_valid_value"]], "max_clusters (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.max_clusters"]], "max_train_size (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.max_train_size"]], "maximum_invalid (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.maximum_invalid"]], "min_clusters (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.min_clusters"]], "min_glint_multiplier (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.min_glint_multiplier"]], "min_positive_pixels (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.min_positive_pixels"]], "min_train_size (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.min_train_size"]], "necessary_bands() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.necessary_bands"]], "parse_maja_name() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.parse_maja_name"]], "parse_planetary_name() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.parse_planetary_name"]], "parse_s2cor_name() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.parse_s2cor_name"]], "parse_sat_name() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.parse_sat_name"]], "pdf_reports (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.pdf_reports"]], "pdf_resolution (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.pdf_resolution"]], "pekel_accuracy (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.pekel_accuracy"]], "pekel_water (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.pekel_water"]], "plot_clustered_data() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.plot_clustered_data"]], "plot_graphs (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.plot_graphs"]], "plot_graphs() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.plot_graphs"]], "plot_ts (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.plot_ts"]], "prepare_external_masks() (in module hypso.classification.waterdetect.waterdetect)": [[25, "hypso.classification.WaterDetect.waterdetect.prepare_external_masks"]], "product_name (hypso.classification.waterdetect.waterdetect.dwimageclustering property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.product_name"]], "read_gdal_ds() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.read_gdal_ds"]], "reference_band (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.reference_band"]], "regularization (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.regularization"]], "remove_negatives() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.remove_negatives"]], "rgb_burn_in() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.rgb_burn_in"]], "run_detect_water() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.run_detect_water"]], "run_water_detect() (hypso.classification.waterdetect.waterdetect.dwwaterdetect class method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.run_water_detect"]], "save_graphs() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.save_graphs"]], "save_indices (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.save_indices"]], "save_report() (hypso.classification.waterdetect.waterdetect.dwwaterdetect static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.save_report"]], "score_index (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.score_index"]], "separate_high_low_mndwi() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.separate_high_low_mndwi"]], "split_data_by_bands() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.split_data_by_bands"]], "supervised_classification() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.supervised_classification"]], "test_pekel() (hypso.classification.waterdetect.waterdetect.dwwaterdetect method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.test_pekel"]], "texture_stretching (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.texture_stretching"]], "tif_2_pdf() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.tif_2_pdf"]], "train_size (hypso.classification.waterdetect.waterdetect.dwconfig property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWConfig.train_size"]], "verify_cluster() (hypso.classification.waterdetect.waterdetect.dwimageclustering method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWImageClustering.verify_cluster"]], "water_mask (hypso.classification.waterdetect.waterdetect.dwwaterdetect property)": [[25, "hypso.classification.WaterDetect.waterdetect.DWWaterDetect.water_mask"]], "write_pdf() (hypso.classification.waterdetect.waterdetect.dwutils static method)": [[25, "hypso.classification.WaterDetect.waterdetect.DWutils.write_pdf"]], "hypso.classification": [[26, "module-hypso.classification"]], "ndwi_watermask() (in module hypso.classification)": [[26, "hypso.classification.ndwi_watermask"]], "threshold_watermask() (in module hypso.classification)": [[26, "hypso.classification.threshold_watermask"]], "hypso.classification.water": [[27, "module-hypso.classification.water"]], "ndwi_watermask() (in module hypso.classification.water)": [[27, "hypso.classification.water.ndwi_watermask"]], "threshold_watermask() (in module hypso.classification.water)": [[27, "hypso.classification.water.threshold_watermask"]], "experimental_features (in module hypso.device)": [[28, "hypso.device.EXPERIMENTAL_FEATURES"]], "hypso (class in hypso.device)": [[28, "hypso.device.Hypso"]], "create_geotiff() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.create_geotiff"]], "create_l1b_nc_file() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.create_l1b_nc_file"]], "delete_geotiff_dir() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.delete_geotiff_dir"]], "find_existing_l2_cube() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.find_existing_l2_cube"]], "find_geotiffs() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.find_geotiffs"]], "get_calibrated_and_corrected_cube() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.get_calibrated_and_corrected_cube"]], "get_calibration_coefficients_path() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.get_calibration_coefficients_path"]], "get_projection_metadata() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.get_projection_metadata"]], "get_spectra() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.get_spectra"]], "get_spectral_coefficients_path() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.get_spectral_coefficients_path"]], "get_srf() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.get_srf"]], "hypso.device": [[28, "module-hypso.device"]], "set_or_create_attr() (in module hypso.device)": [[28, "hypso.device.set_or_create_attr"]], "toa_reflectance_from_toa_radiance() (hypso.device.hypso method)": [[28, "hypso.device.Hypso.toa_reflectance_from_toa_radiance"]], "download_nc_files() (in module hypso.download)": [[29, "hypso.download.download_nc_files"]], "hypso.download": [[29, "module-hypso.download"]], "coordinate_correction() (in module hypso.georeference.coordinate_correction)": [[30, "hypso.georeference.coordinate_correction.coordinate_correction"]], "coordinate_correction_matrix() (in module hypso.georeference.coordinate_correction)": [[30, "hypso.georeference.coordinate_correction.coordinate_correction_matrix"]], "hypso.georeference.coordinate_correction": [[30, "module-hypso.georeference.coordinate_correction"]], "start_coordinate_correction() (in module hypso.georeference.coordinate_correction)": [[30, "hypso.georeference.coordinate_correction.start_coordinate_correction"]], "create_adcs_timestamps_files() (in module hypso.georeference.create_adcs_timestamps_files)": [[31, "hypso.georeference.create_adcs_timestamps_files.create_adcs_timestamps_files"]], "hypso.georeference.create_adcs_timestamps_files": [[31, "module-hypso.georeference.create_adcs_timestamps_files"]], "r_eq (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.R_eq"], [32, "id0"], [32, "id2"], [32, "id4"]], "r_pl (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.R_pl"]], "e_2 (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.e_2"]], "ecef_to_lat_lon_alt() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.ecef_to_lat_lon_alt"]], "eci_lon_to_ecef_lon() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.eci_lon_to_ecef_lon"]], "eci_to_lat_lon_alt() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.eci_to_lat_lon_alt"]], "eci_to_lat_loneci_alt() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.eci_to_lat_loneci_alt"]], "ellipsoid_line_intersection() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.ellipsoid_line_intersection"]], "f (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.f"], [32, "id1"], [32, "id3"], [32, "id5"]], "hypso.georeference.georef.geometric": [[32, "module-hypso.georeference.georef.geometric"]], "lat_lon_alt_to_ecef() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.lat_lon_alt_to_ecef"]], "mat_from_quat() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.mat_from_quat"]], "minimum_bounding_rectangle() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.minimum_bounding_rectangle"]], "pos_ecef_to_lat_lon_alt() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.pos_ecef_to_lat_lon_alt"]], "rotate_axis_angle() (in module hypso.georeference.georef.geometric)": [[32, "hypso.georeference.georef.geometric.rotate_axis_angle"]], "altered_roadmap (hypso.georeference.georef.gmaps.googlemapslayers attribute)": [[33, "hypso.georeference.georef.gmaps.GoogleMapsLayers.ALTERED_ROADMAP"]], "googlemapdownloader (class in hypso.georeference.georef.gmaps)": [[33, "hypso.georeference.georef.gmaps.GoogleMapDownloader"]], "googlemapslayers (class in hypso.georeference.georef.gmaps)": [[33, "hypso.georeference.georef.gmaps.GoogleMapsLayers"]], "hybrid (hypso.georeference.georef.gmaps.googlemapslayers attribute)": [[33, "hypso.georeference.georef.gmaps.GoogleMapsLayers.HYBRID"]], "roadmap (hypso.georeference.georef.gmaps.googlemapslayers attribute)": [[33, "hypso.georeference.georef.gmaps.GoogleMapsLayers.ROADMAP"]], "satellite (hypso.georeference.georef.gmaps.googlemapslayers attribute)": [[33, "hypso.georeference.georef.gmaps.GoogleMapsLayers.SATELLITE"]], "terrain (hypso.georeference.georef.gmaps.googlemapslayers attribute)": [[33, "hypso.georeference.georef.gmaps.GoogleMapsLayers.TERRAIN"]], "terrain_only (hypso.georeference.georef.gmaps.googlemapslayers attribute)": [[33, "hypso.georeference.georef.gmaps.GoogleMapsLayers.TERRAIN_ONLY"]], "generateimage() (hypso.georeference.georef.gmaps.googlemapdownloader method)": [[33, "hypso.georeference.georef.gmaps.GoogleMapDownloader.generateImage"]], "hypso.georeference.georef.gmaps": [[33, "module-hypso.georeference.georef.gmaps"]], "latlon_to_tilexy() (hypso.georeference.georef.gmaps.googlemapdownloader method)": [[33, "hypso.georeference.georef.gmaps.GoogleMapDownloader.latlon_to_tileXY"]], "main() (in module hypso.georeference.georef.gmaps)": [[33, "hypso.georeference.georef.gmaps.main"]], "pixel_to_latlon() (in module hypso.georeference.georef.gmaps)": [[33, "hypso.georeference.georef.gmaps.pixel_to_latlon"]], "altered_roadmap (hypso.georeference.georef.googlemapslayers attribute)": [[34, "hypso.georeference.georef.GoogleMapsLayers.ALTERED_ROADMAP"]], "googlemapdownloader (class in hypso.georeference.georef)": [[34, "hypso.georeference.georef.GoogleMapDownloader"]], "googlemapslayers (class in hypso.georeference.georef)": [[34, "hypso.georeference.georef.GoogleMapsLayers"]], "hybrid (hypso.georeference.georef.googlemapslayers attribute)": [[34, "hypso.georeference.georef.GoogleMapsLayers.HYBRID"]], "roadmap (hypso.georeference.georef.googlemapslayers attribute)": [[34, "hypso.georeference.georef.GoogleMapsLayers.ROADMAP"]], "r_eq (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.R_eq"]], "r_pl (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.R_pl"]], "satellite (hypso.georeference.georef.googlemapslayers attribute)": [[34, "hypso.georeference.georef.GoogleMapsLayers.SATELLITE"]], "terrain (hypso.georeference.georef.googlemapslayers attribute)": [[34, "hypso.georeference.georef.GoogleMapsLayers.TERRAIN"]], "terrain_only (hypso.georeference.georef.googlemapslayers attribute)": [[34, "hypso.georeference.georef.GoogleMapsLayers.TERRAIN_ONLY"]], "e_2 (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.e_2"]], "ecef_to_lat_lon_alt() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.ecef_to_lat_lon_alt"]], "eci_lon_to_ecef_lon() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.eci_lon_to_ecef_lon"]], "eci_to_lat_lon_alt() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.eci_to_lat_lon_alt"]], "eci_to_lat_loneci_alt() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.eci_to_lat_loneci_alt"]], "ellipsoid_line_intersection() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.ellipsoid_line_intersection"]], "f (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.f"]], "gen_resample_grid() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.gen_resample_grid"]], "gen_resample_grid_bbox_min() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.gen_resample_grid_bbox_min"]], "generateimage() (hypso.georeference.georef.googlemapdownloader method)": [[34, "hypso.georeference.georef.GoogleMapDownloader.generateImage"]], "get_greenwich_mean_sidereal_time_seconds() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.get_greenwich_mean_sidereal_time_seconds"], [34, "id1"]], "get_julian_day_number() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.get_julian_day_number"], [34, "id0"]], "hypso.georeference.georef": [[34, "module-hypso.georeference.georef"]], "lat_lon_alt_to_ecef() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.lat_lon_alt_to_ecef"]], "latlon_to_tilexy() (hypso.georeference.georef.googlemapdownloader method)": [[34, "hypso.georeference.georef.GoogleMapDownloader.latlon_to_tileXY"]], "main() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.main"]], "mat_from_quat() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.mat_from_quat"]], "minimum_bounding_rectangle() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.minimum_bounding_rectangle"]], "pixel_to_latlon() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.pixel_to_latlon"]], "pos_ecef_to_lat_lon_alt() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.pos_ecef_to_lat_lon_alt"]], "rotate_axis_angle() (in module hypso.georeference.georef)": [[34, "hypso.georeference.georef.rotate_axis_angle"]], "get_greenwich_mean_sidereal_time_seconds() (in module hypso.georeference.georef.time)": [[35, "hypso.georeference.georef.time.get_greenwich_mean_sidereal_time_seconds"]], "get_julian_day_number() (in module hypso.georeference.georef.time)": [[35, "hypso.georeference.georef.time.get_julian_day_number"]], "hypso.georeference.georef.time": [[35, "module-hypso.georeference.georef.time"]], "gen_resample_grid() (in module hypso.georeference.georef.utils)": [[36, "hypso.georeference.georef.utils.gen_resample_grid"]], "gen_resample_grid_bbox_min() (in module hypso.georeference.georef.utils)": [[36, "hypso.georeference.georef.utils.gen_resample_grid_bbox_min"]], "hypso.georeference.georef.utils": [[36, "module-hypso.georeference.georef.utils"]], "r_eq (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.R_eq"], [37, "id0"]], "r_pl (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.R_pl"]], "add_grid() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.add_grid"]], "compute_elevation_angle() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.compute_elevation_angle"]], "compute_local_angles() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.compute_local_angles"]], "compute_local_angles_2() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.compute_local_angles_2"]], "compute_off_nadir_angle() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.compute_off_nadir_angle"]], "e_2 (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.e_2"]], "f (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.f"], [37, "id1"]], "geometry_computation() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.geometry_computation"]], "get_wkt() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.get_wkt"]], "get_wkt_points() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.get_wkt_points"]], "hypso.georeference.georef_plots": [[37, "module-hypso.georeference.georef_plots"]], "hypso_height_sensor (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.hypso_height_sensor"]], "numpy_norm() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.numpy_norm"]], "pixel_index_to_angle() (in module hypso.georeference.georef_plots)": [[37, "hypso.georeference.georef_plots.pixel_index_to_angle"]], "create_adcs_timestamps_files() (in module hypso.georeference)": [[38, "hypso.georeference.create_adcs_timestamps_files"]], "generate_full_geotiff() (in module hypso.georeference)": [[38, "hypso.georeference.generate_full_geotiff"]], "generate_rgb_geotiff() (in module hypso.georeference)": [[38, "hypso.georeference.generate_rgb_geotiff"]], "geometry_computation() (in module hypso.georeference)": [[38, "hypso.georeference.geometry_computation"]], "hypso.georeference": [[38, "module-hypso.georeference"]], "interpolate_at_frame() (in module hypso.georeference)": [[38, "hypso.georeference.interpolate_at_frame"]], "start_coordinate_correction() (in module hypso.georeference)": [[38, "hypso.georeference.start_coordinate_correction"]], "hypso.georeference.interpolate_at_frame": [[39, "module-hypso.georeference.interpolate_at_frame"]], "interpolate_at_frame() (in module hypso.georeference.interpolate_at_frame)": [[39, "hypso.georeference.interpolate_at_frame.interpolate_at_frame"]], "debug (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.DEBUG"]], "export_single_bands (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.EXPORT_SINGLE_BANDS"]], "b_band_index (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.b_band_index"]], "export_single_band_geotiff() (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.export_single_band_geotiff"]], "g_band_index (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.g_band_index"]], "generate_full_geotiff() (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.generate_full_geotiff"]], "generate_geotiff() (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.generate_geotiff"]], "generate_rgb_geotiff() (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.generate_rgb_geotiff"]], "hypso.georeference.reference": [[40, "module-hypso.georeference.reference"]], "interpolate_geotiff() (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.interpolate_geotiff"]], "r_band_index (in module hypso.georeference.reference)": [[40, "hypso.georeference.reference.r_band_index"]], "hypso (class in hypso)": [[41, "hypso.Hypso"]], "__author__ (in module hypso)": [[41, "hypso.__author__"]], "__credits__ (in module hypso)": [[41, "hypso.__credits__"]], "create_geotiff() (hypso.hypso method)": [[41, "hypso.Hypso.create_geotiff"]], "create_l1b_nc_file() (hypso.hypso method)": [[41, "hypso.Hypso.create_l1b_nc_file"]], "delete_geotiff_dir() (hypso.hypso method)": [[41, "hypso.Hypso.delete_geotiff_dir"]], "download_nc_files() (in module hypso)": [[41, "hypso.download_nc_files"]], "find_existing_l2_cube() (hypso.hypso method)": [[41, "hypso.Hypso.find_existing_l2_cube"]], "find_geotiffs() (hypso.hypso method)": [[41, "hypso.Hypso.find_geotiffs"]], "get_calibrated_and_corrected_cube() (hypso.hypso method)": [[41, "hypso.Hypso.get_calibrated_and_corrected_cube"]], "get_calibration_coefficients_path() (hypso.hypso method)": [[41, "hypso.Hypso.get_calibration_coefficients_path"]], "get_projection_metadata() (hypso.hypso method)": [[41, "hypso.Hypso.get_projection_metadata"]], "get_spectra() (hypso.hypso method)": [[41, "hypso.Hypso.get_spectra"]], "get_spectral_coefficients_path() (hypso.hypso method)": [[41, "hypso.Hypso.get_spectral_coefficients_path"]], "get_srf() (hypso.hypso method)": [[41, "hypso.Hypso.get_srf"]], "hypso": [[41, "module-hypso"]], "toa_reflectance_from_toa_radiance() (hypso.hypso method)": [[41, "hypso.Hypso.toa_reflectance_from_toa_radiance"]], "get_rgb() (in module hypso.plot)": [[42, "hypso.plot.get_rgb"]], "hypso.plot": [[42, "module-hypso.plot"]], "plot_array_overlay() (in module hypso.plot)": [[42, "hypso.plot.plot_array_overlay"]], "point_rgb_map() (in module hypso.plot)": [[42, "hypso.plot.point_rgb_map"]], "show_rgb_map() (in module hypso.plot)": [[42, "hypso.plot.show_rgb_map"]], "write_rgb_to_png() (in module hypso.plot)": [[42, "hypso.plot.write_rgb_to_png"]], "plotzoom (in module hypso.plot.map)": [[43, "hypso.plot.map.PLOTZOOM"]], "auto_adjust_img() (in module hypso.plot.map)": [[43, "hypso.plot.map.auto_adjust_img"]], "axis_extent() (in module hypso.plot.map)": [[43, "hypso.plot.map.axis_extent"]], "check_projection_geotiff() (in module hypso.plot.map)": [[43, "hypso.plot.map.check_projection_geotiff"]], "get_cartopy_axis() (in module hypso.plot.map)": [[43, "hypso.plot.map.get_cartopy_axis"]], "get_rgb() (in module hypso.plot.map)": [[43, "hypso.plot.map.get_rgb"]], "hypso.plot.map": [[43, "module-hypso.plot.map"]], "image_extent() (in module hypso.plot.map)": [[43, "hypso.plot.map.image_extent"]], "plot_array_overlay() (in module hypso.plot.map)": [[43, "hypso.plot.map.plot_array_overlay"]], "point_rgb_map() (in module hypso.plot.map)": [[43, "hypso.plot.map.point_rgb_map"]], "show_rgb_map() (in module hypso.plot.map)": [[43, "hypso.plot.map.show_rgb_map"]], "tick_log_formatter() (in module hypso.plot.map)": [[43, "hypso.plot.map.tick_log_formatter"]], "write_rgb_to_png() (in module hypso.plot.map)": [[43, "hypso.plot.map.write_rgb_to_png"]], "hypso.reading": [[44, "module-hypso.reading"]], "load_nc() (in module hypso.reading)": [[44, "hypso.reading.load_nc"]], "experimental_features (in module hypso.reading.load)": [[45, "hypso.reading.load.EXPERIMENTAL_FEATURES"]], "get_lat_lon_2d() (in module hypso.reading.load)": [[45, "hypso.reading.load.get_lat_lon_2d"]], "get_local_angles() (in module hypso.reading.load)": [[45, "hypso.reading.load.get_local_angles"]], "get_metainfo_from_nc_file() (in module hypso.reading.load)": [[45, "hypso.reading.load.get_metainfo_from_nc_file"]], "get_raw_cube_from_nc_file() (in module hypso.reading.load)": [[45, "hypso.reading.load.get_raw_cube_from_nc_file"]], "hypso.reading.load": [[45, "module-hypso.reading.load"]], "load_nc() (in module hypso.reading.load)": [[45, "hypso.reading.load.load_nc"]], "hsi2rgb() (in module hypso.utils)": [[46, "hypso.utils.HSI2RGB"]], "myprogressbar (class in hypso.utils)": [[46, "hypso.utils.MyProgressBar"]], "__call__() (hypso.utils.myprogressbar method)": [[46, "hypso.utils.MyProgressBar.__call__"]], "compare_netcdf_files() (in module hypso.utils)": [[46, "hypso.utils.compare_netcdf_files"]], "find_all_files() (in module hypso.utils)": [[46, "hypso.utils.find_all_files"]], "find_dir() (in module hypso.utils)": [[46, "hypso.utils.find_dir"]], "find_file() (in module hypso.utils)": [[46, "hypso.utils.find_file"]], "hypso.utils": [[46, "module-hypso.utils"]], "is_integer_num() (in module hypso.utils)": [[46, "hypso.utils.is_integer_num"]], "print_nc() (in module hypso.utils)": [[46, "hypso.utils.print_nc"]], "hsi2rgb() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.HSI2RGB"]], "myprogressbar (class in hypso.utils.utils)": [[47, "hypso.utils.utils.MyProgressBar"]], "__call__() (hypso.utils.utils.myprogressbar method)": [[47, "hypso.utils.utils.MyProgressBar.__call__"]], "compare_netcdf_files() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.compare_netcdf_files"]], "find_all_files() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.find_all_files"]], "find_closest_water_lat_lon_match() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.find_closest_water_lat_lon_match"]], "find_dir() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.find_dir"]], "find_file() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.find_file"]], "flatten_dict() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.flatten_dict"]], "haversine() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.haversine"]], "hypso.utils.utils": [[47, "module-hypso.utils.utils"]], "is_integer_num() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.is_integer_num"]], "list_array_1d_to_string() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.list_array_1d_to_string"]], "navigate_recursive_nc() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.navigate_recursive_nc"]], "nested_dict_to_df() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.nested_dict_to_df"]], "print_nc() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.print_nc"]], "pseudo_convolution() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.pseudo_convolution"]], "recursive_print_nc() (in module hypso.utils.utils)": [[47, "hypso.utils.utils.recursive_print_nc"]]}})