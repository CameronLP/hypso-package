:py:mod:`hypso.plot.map`
========================

.. py:module:: hypso.plot.map


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   hypso.plot.map.axis_extent
   hypso.plot.map.image_extent
   hypso.plot.map.tick_log_formatter
   hypso.plot.map.get_cartopy_axis
   hypso.plot.map.point_rgb_map
   hypso.plot.map.show_rgb_map
   hypso.plot.map.plot_array_overlay
   hypso.plot.map.auto_adjust_img
   hypso.plot.map.get_rgb
   hypso.plot.map.check_projection_geotiff
   hypso.plot.map.write_rgb_to_png



Attributes
~~~~~~~~~~

.. autoapisummary::

   hypso.plot.map.PLOTZOOM


.. py:data:: PLOTZOOM
   :value: 1.0

   

.. py:function:: axis_extent(lat, lon)

   Calculate the axis extent of the capture using the latitude and longitude arrays

   :param lat: 2D array of latitudes
   :param lon: 2D array of longitudes

   :return: List with the [lon_min, lon_max, lat_min, lat_max]


.. py:function:: image_extent(inproj_value, lat, lon)

   Calculate the image extent of the capture using the latitude and longitude arrays to plot capture on a map.

   :param inproj_value: Spatial reference projection value
   :param lat: 2D array of latitudes
   :param lon: 2D array of longitudes

   :return: Returns two values, the image extent of the capture transformed into an EPSG projection and the projection
       into a cartopy projection


.. py:function:: tick_log_formatter(y, pos)

   Matplotlib Image tick formatter

   :param pos: Axis position
   :param y: Y-axis object

   :return: Formatted axis to log format


.. py:function:: get_cartopy_axis(satellite_obj, dpi_input)

   Get cartopy axis adjusted to the projection of the Hypso capture focused on the map area defined by the latitude
   and longitude arrays.

   :param satellite_obj: Hypso satellite object
   :param dpi_input: DPI Resolution for the plot

   :return: Matplotlib axes object adjusted to the Hypso image, the image extent tuple, the project RPSG and the
       latitude and longitude array.


.. py:function:: point_rgb_map(satellite_obj, plotTitle='RGB Image', dpi_input=450, patch_dict=None, r_plot=0.007, path_to_save=None)

   Function to add points to overlay on the RGB Map of the Hypso image

   :param satellite_obj: Hypso satellite object
   :param plotTitle: Title for the plot
   :param dpi_input: Resolution in DPI´s. Default 450.
   :param patch_dict: Dictionary containing the location and color of the points to plot
       ``{"Point 1":{"lat":60.7776, "lon":11.0895, "color":"red"},
       "Point 2":{"lat":60.5, "lon":10.4, "color":"orange"}}``
   :param r_plot: Radius of the plotted points. Default: 0.007.
   :param path_to_save: Absolute Path to save the plot image.

   :return: No return.


.. py:function:: show_rgb_map(satellite_obj, plotTitle='RGB Image', dpi_input=450)

   Show RGB overlay of the Hypso image on a map.

   :param satellite_obj: Hypso satellite object
   :param plotTitle: Title for the plot
   :param dpi_input: Resolution in DPI´s. Default 450.

   :return: No return.


.. py:function:: plot_array_overlay(satellite_obj, plot_array, plotTitle='2D Array', cbar_title=' Chlorophyll Concentration [mg m^-3]', dpi_input=450, min_value=0.01, max_value=100)

   Plot a 2D array overlayed on a RGB Hypso Capture on a Map.

   :param satellite_obj: Hypso satellite object
   :param plot_array: 2D array to plot. Should be of the same size of the Hypso capture Lat/Lon arrays
   :param plotTitle: Tile for the plot
   :param cbar_title: Tile for the colorbar
   :param dpi_input: Resolution in DPI´s. Default 450.
   :param min_value: Minimum value for the Colorbar
   :param max_value: Maximum value for the Colorbar

   :return: No return.


.. py:function:: auto_adjust_img(img)

   Automatically adjust the image contracts using histogram equalization.

   :param img: Image to adjust as a numpy array.

   :return: Adjusted image as a numpy array.


.. py:function:: get_rgb(sat_obj, R_wl=650, G_wl=550, B_wl=450)

   Write an RGB Image from specified Bands. Optional parameters are

   :param R_wl: The wavelength for the red channel. Defaults to 650.
   :param G_wl: The wavelength for the green channel. Defaults to 550.
   :param B_wl: The wavelength for the blue channel. Defaults to 450.
   :param sat_obj: Hypso satellite object

   :return: PIL Image object


.. py:function:: check_projection_geotiff(satobj)

   Check and generate the projection metadata from GeoTiff. Generates GeoTiff if none is found.

   :param satobj: Hypso satellite object

   :return:


.. py:function:: write_rgb_to_png(sat_obj, path_to_save)

   Write the RGB image to a .png file

   :param sat_obj: Hypso Satellite object
   :param path_to_save: Path to save the .png image. Should include the file extension.

   :return: No return.


