:py:mod:`hypso.calibration.correction`
======================================

.. py:module:: hypso.calibration.correction


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   hypso.calibration.correction.crop_and_bin_matrix
   hypso.calibration.correction.get_coefficients_from_file
   hypso.calibration.correction.get_coefficients_from_dict
   hypso.calibration.correction.calibrate_cube
   hypso.calibration.correction.apply_radiometric_calibration
   hypso.calibration.correction.smile_correction_one_row
   hypso.calibration.correction.smile_correction_one_frame
   hypso.calibration.correction.smile_correct_cube
   hypso.calibration.correction.destriping_correct_cube



.. py:function:: crop_and_bin_matrix(matrix, x_start, x_stop, y_start, y_stop, bin_x=1, bin_y=1)

   Crops matrix to AOI. Bins matrix so that the average value in the bin_x
   number of pixels is stored.


.. py:function:: get_coefficients_from_file(coeff_path)

   Get correction coefficients from file

   :param coeff_path: Coefficient path to read (.csv)

   :return: 2D array of coefficients


.. py:function:: get_coefficients_from_dict(coeff_dict, satobj)

   Get the coefficients from the csv files contained in a dictionary.

   :param coeff_dict: Dictionary containing the paths of the csv files to read
   :param satobj: Hypso satellite object

   :return: Dictionary containing the 2D coefficients read from the csv files


.. py:function:: calibrate_cube(info_sat, raw_cube, correction_coefficients_dict)

   Radiometrically Calibrate the Raw Cube (digital counts) to Radiance

   :param info_sat: Dictionary containing capture information
   :param raw_cube: Numpy array containing digital countes 3-channel cube
   :param correction_coefficients_dict: Dictionary containing the 2D coefficients for correction

   :return: Corrected 3-channel cube


.. py:function:: apply_radiometric_calibration(frame, exp, background_value, radiometric_calibration_coefficients)

   Applies radiometric calibration. Assumes input is 12-bit values, and that the radiometric calibration
   coefficients are the same size as the input image. Note: radiometric calibration coefficients have original
   size (684,1080), matching the "normal" AOI of the HYPSO-1 data (with no binning).

   :param frame: 2D frame to apply radiometric calibration
   :param exp: Exposure value
   :param background_value: Background value
   :param radiometric_calibration_coefficients: 2D array of radio calibration coefficients

   :return: Calibrated frame 2D array


.. py:function:: smile_correction_one_row(row, w, w_ref)

   Applies smile correction. Use cubic spline interpolation to resample one row onto the correct
   wavelengths/bands from a reference wavelength/band array to correct for the smile effect.

   :param row: Data row to apply smile correction
   :param w:
   :param w_ref:

   :return: Row corrected for smile effect


.. py:function:: smile_correction_one_frame(frame, spectral_band_matrix)

   Run smile correction on each row in a frame, using the center row as the reference wavelength/band for
   smile correction.

   :param frame: 2D frame on which to apply smile correction
   :param spectral_band_matrix: Spectral coefficients (Wavelength)

   :return: Corrected frame after smile correction


.. py:function:: smile_correct_cube(cube, correction_coefficients_dict)

   Run smile correction on each frame in a cube, using the center row in the frame as the reference wavelength/band
   for smile correction.

   :param cube: 3-channel spectral cube
   :param correction_coefficients_dict: Dictionary containing the coefficients for smile correction
   :return:


.. py:function:: destriping_correct_cube(cube, correction_coefficients_dict)

   Apply destriping correction matrix.

   :param cube: 3-channel spectral cube
   :param correction_coefficients_dict: Dictionary containing the 2D coefficients for destriping

   :return: 3-channel array for destriping correction


