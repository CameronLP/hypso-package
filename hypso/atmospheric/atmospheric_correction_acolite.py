import numpy as np
from importlib.resources import files
from urllib.parse import urlparse, unquote
from hypso.utils import MyProgressBar
import urllib.request
import tarfile
from pathlib import Path
from hypso.utils import find_file
import netCDF4 as nc


def get_acolite_repo():
    github_url = r"https://github.com/acolite/acolite/archive/refs/tags/20231023.0.tar.gz"
    filename = unquote(urlparse(github_url).path.split("/")[-1])

    output_filename = files(
        'hypso.atmospheric').joinpath(f'data/{filename}')

    try:
        urllib.request.urlretrieve(url=github_url,
                                   filename=output_filename,
                                   reporthook=MyProgressBar(filename))

    except Exception as err:
        print(f"Download Failed. {err}")
        print(f"Deleting {filename}")
        # If fail, delete
        output_filename.unlink(missing_ok=True)

    # Uncompress
    tar = tarfile.open(output_filename, 'r:gz')
    dst_path = files(
        'hypso.atmospheric').joinpath(f'data/')
    tar.extractall(dst_path)
    tar.close()


def run_acolite(hypso_info, atmos_dict):
    # Settings file
    settings_path = files(
        'hypso.atmospheric').joinpath(f'data/acolite_settings.txt')

    # Dir to decompress tar file
    acolite_dir = Path(files(
        'hypso.atmospheric').joinpath(f'data/acolite-20231023.0/'))

    # Path for acolite tar (for decompression)
    acolite_tar = acolite_dir = Path(files(
        'hypso.atmospheric').joinpath(f'data/20231023.0.tar.gz'))

    # Script that starts acolite
    launch_acolite_path = str(files(
        'hypso.atmospheric').joinpath(f'data/acolite-20231023.0/launch_acolite.py'))

    # Create Dir for the output
    acolite_output_dir = Path(hypso_info["top_folder_name"], "geotiff", "acolite-output")

    acolite_output_dir.mkdir(parents=True, exist_ok=True)

    # Uncompress ACOLITE if not done
    if not acolite_dir.is_dir():
        # Uncompress
        tar = tarfile.open(acolite_tar, 'r:gz')
        dst_path = files(
            'hypso.atmospheric').joinpath(f'data/')
        tar.extractall(dst_path)
        tar.close()

    # If user and password for NASA earthdata provided, updated file ---------------
    user_pwd_file = Path(files(
        'hypso.atmospheric').joinpath(f'data/acolite-20231023.0/config/config.txt'))
    try:
        user_earthdata = atmos_dict["user"]
        pwd_earthdata = atmos_dict["password"]

        with open(user_pwd_file, 'r') as file:
            # read a list of lines into data
            data = file.readlines()

        # now change the 2nd line, note that you have to add a newline
        original_line61 = data[61]
        original_line62 = data[62]
        data[61] = data[61].replace("\n", "") + f"{user_earthdata}\n"
        data[62] = data[62].replace("\n", "") + f"{pwd_earthdata}\n"

        # and write everything back
        with open(user_pwd_file, 'w') as file:
            file.writelines(data)
    except Exception as err:
        raise Exception(f"No EARTH DATA user or pwd provided in the dictionary. {err}")

    # Call ACOLITE Script -----------------------------------------------------------
    import subprocess
    try:
        subprocess.run(["python", launch_acolite_path, '--cli',
                         '--inputfile', hypso_info["nc_file"],
                         '--output', acolite_output_dir,
                         '--settings', settings_path],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT)

    except Exception as e:
        raise Exception(e)

    # Read and return L2 .nc file generated by acolite
    acolite_l2_file = find_file(hypso_info["top_folder_name"], "L2R", ".nc")

    # Read .nc
    final_acolite_l2 = None

    with nc.Dataset(acolite_l2_file, format="NETCDF4") as f:
        group = f
        keys = [i for i in f.variables.keys()]
        try:
            keys.remove('lat')
            keys.remove('lon')
        except:
            print("Couldn't find lat and lon keys on Acolite .nc")

        toa_keys = [k for k in keys if 'rhos' not in k]
        surface_keys = [kk for kk in keys if 'rhot' not in kk]

        # Add Cube

        for i, k in enumerate(surface_keys):
            current_channel = np.array(group.variables[k][:])
            if final_acolite_l2 is None:
                final_acolite_l2 = np.empty(
                    (current_channel.shape[0], current_channel.shape[1], len(surface_keys)))

            final_acolite_l2[:, :, i] = current_channel

    # Recover config.txt file -----------------------------------------------
    with open(user_pwd_file, 'r') as file:
        # read a list of lines into data
        data = file.readlines()

    # now change the 2nd line, note that you have to add a newline
    data[61] = "EARTHDATA_u=\n"
    data[62] = "EARTHDATA_p==\n"

    # and write everything back
    with open(user_pwd_file, 'w') as file:
        file.writelines(data)

    return final_acolite_l2
